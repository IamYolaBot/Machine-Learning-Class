{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LY0SJUCSY305"
   },
   "source": [
    "#### Copyright 2018 Google LLC."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "8Q1hsKyBZDVu"
   },
   "outputs": [],
   "source": [
    "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "# https://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "y5tftaRtUcm7"
   },
   "source": [
    "#Intro to Modeling\n",
    "\n",
    "\n",
    "**Learning Objectives:**\n",
    "* Become familiar with pandas for handling small datasets\n",
    "* Use the tf.Estimator and Feature Column API to experiment with feature transformations\n",
    "* Use visualizations and run experiments to understand the value of feature transformations\n",
    "\n",
    "Please **make a copy** of this Colab notebook before starting this lab. To do so, choose **File**->**Save a copy in Drive**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TT_bZ9E0ZWaN"
   },
   "source": [
    "## Setup\n",
    "\n",
    "Let's start by importing our dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "both",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wZ_T2SgDVKUH",
    "outputId": "1f82351b-b08a-4bb6-fdd4-811abf12daae"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/compat/v2_compat.py:96: disable_resource_variables (from tensorflow.python.ops.variable_scope) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "non-resource variables are not supported in the long term\n"
     ]
    }
   ],
   "source": [
    "%reset -f\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "\n",
    "import tensorflow.compat.v1 as tf\n",
    "tf.disable_v2_behavior()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Sx4-PWE-VaD_"
   },
   "source": [
    "## Pandas, a helpful data analysis library for in-memory dataset\n",
    "\n",
    "We use a package called [Pandas](http://pandas.pydata.org/) for reading in our data, exploring our data and doing some basic processing. It is really helpful for datasets that fit in memory! And it has some nice integrations, as you will see.\n",
    "\n",
    "First we set up some options to control how items are displayed and the maximum number of rows to show when displaying a table.  Feel free to change this setup to whatever you'd like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "hKUIMcPCVRqv"
   },
   "outputs": [],
   "source": [
    "# Set pandas output display to have one digit for decimal places and limit it to\n",
    "# printing 15 rows.\n",
    "pd.options.display.float_format = '{:.2f}'.format\n",
    "pd.options.display.max_rows = 15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "H_fTMztUVelY"
   },
   "source": [
    "### Load the dataset with pandas\n",
    "The car data set we will be using in this lab is provided as a comma separated file without a header row.  In order for each column to have a meaningful header name we must provide it.  We get the information about the columns from the [Automobile Data Set](https://archive.ics.uci.edu/ml/datasets/automobile).\n",
    "\n",
    "We will use the features of the car, to try to predict its price.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "code",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Y38V73EgVYwt",
    "outputId": "b03b80f5-81b1-44a0-b4c9-0831176d73d0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data set loaded. Num examples:  205\n"
     ]
    }
   ],
   "source": [
    "# Provide the names for the columns since the CSV file with the data does\n",
    "# not have a header row.\n",
    "feature_names = ['symboling', 'normalized-losses', 'make', 'fuel-type',\n",
    "        'aspiration', 'num-doors', 'body-style', 'drive-wheels',\n",
    "        'engine-location', 'wheel-base', 'length', 'width', 'height', 'weight',\n",
    "        'engine-type', 'num-cylinders', 'engine-size', 'fuel-system', 'bore',\n",
    "        'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg',\n",
    "        'highway-mpg', 'price']\n",
    "\n",
    "\n",
    "# Load in the data from a CSV file that is comma separated.\n",
    "car_data = pd.read_csv('https://storage.googleapis.com/mledu-datasets/cars_data.csv',\n",
    "                        sep=',', names=feature_names, header=None, encoding='latin-1')\n",
    "\n",
    "\n",
    "# We'll then randomize the data, just to be sure not to get any pathological\n",
    "# ordering effects that might harm the performance of Stochastic Gradient\n",
    "# Descent.\n",
    "car_data = car_data.reindex(np.random.permutation(car_data.index))\n",
    "\n",
    "print(\"Data set loaded. Num examples: \", len(car_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nAHZBtDlkmGa"
   },
   "source": [
    "This is a really small dataset! Only 205 examples.\n",
    "\n",
    "For simplicity in this codelab, we do not split the data further into training and validation. But you MUST do this on real datasets, or else you will overfit to your single dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aQ1HxLrOVqZk"
   },
   "source": [
    "## Task 0: Use pandas to explore and prepare the data\n",
    "\n",
    "- Use Pandas to inspect the data and manually curate a list of numeric_feature_names and categorical_feature_names.\n",
    "\n",
    "\n",
    "Useful functions:\n",
    "- `type()` called on any Python object describes the type of the object\n",
    "- `dataframe[4:7]` pulls out rows 4, 5, 6 in a Pandas dataframe\n",
    "- `dataframe[['mycol1', 'mycol2']]` pulls out the two requested columns into a new Pandas dataframe\n",
    "- `dataframe['mycol1']` returns a Pandas series -- not a dataframe!\n",
    "- `dataframe.describe()` prints out statistics for each dataframe column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 179
    },
    "id": "TfeHYeMf7PwQ",
    "outputId": "33f1e7c6-abc4-40b9-ac76-3e826cec1a0c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>normalized-losses</th>\n",
       "      <th>make</th>\n",
       "      <th>fuel-type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num-doors</th>\n",
       "      <th>body-style</th>\n",
       "      <th>drive-wheels</th>\n",
       "      <th>engine-location</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-cylinders</th>\n",
       "      <th>engine-size</th>\n",
       "      <th>fuel-system</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression-ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak-rpm</th>\n",
       "      <th>city-mpg</th>\n",
       "      <th>highway-mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>?</td>\n",
       "      <td>mazda</td>\n",
       "      <td>diesel</td>\n",
       "      <td>std</td>\n",
       "      <td>?</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>98.80</td>\n",
       "      <td>177.80</td>\n",
       "      <td>66.50</td>\n",
       "      <td>55.50</td>\n",
       "      <td>2443</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>122</td>\n",
       "      <td>idi</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.39</td>\n",
       "      <td>22.70</td>\n",
       "      <td>64</td>\n",
       "      <td>4650</td>\n",
       "      <td>36</td>\n",
       "      <td>42</td>\n",
       "      <td>10795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>0</td>\n",
       "      <td>161</td>\n",
       "      <td>peugot</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>107.90</td>\n",
       "      <td>186.70</td>\n",
       "      <td>68.40</td>\n",
       "      <td>56.70</td>\n",
       "      <td>3075</td>\n",
       "      <td>l</td>\n",
       "      <td>four</td>\n",
       "      <td>120</td>\n",
       "      <td>mpfi</td>\n",
       "      <td>3.46</td>\n",
       "      <td>3.19</td>\n",
       "      <td>8.40</td>\n",
       "      <td>97</td>\n",
       "      <td>5000</td>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>16630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>1</td>\n",
       "      <td>119</td>\n",
       "      <td>plymouth</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>93.70</td>\n",
       "      <td>157.30</td>\n",
       "      <td>63.80</td>\n",
       "      <td>50.80</td>\n",
       "      <td>1918</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>90</td>\n",
       "      <td>2bbl</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.23</td>\n",
       "      <td>9.40</td>\n",
       "      <td>68</td>\n",
       "      <td>5500</td>\n",
       "      <td>37</td>\n",
       "      <td>41</td>\n",
       "      <td>5572</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     symboling normalized-losses      make  ... city-mpg highway-mpg  price\n",
       "63           0                 ?     mazda  ...       36          42  10795\n",
       "115          0               161    peugot  ...       19          24  16630\n",
       "118          1               119  plymouth  ...       37          41   5572\n",
       "\n",
       "[3 rows x 26 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_data[4:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "both",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "VsOUrVozoe9u",
    "outputId": "f38f8dd8-6ce2-4538-e7cf-50a28e3078e4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "LABEL = 'price'\n",
    "\n",
    "numeric_feature_names =          [\n",
    "                                  'symboling',\n",
    "                                  'wheel-base',\n",
    "                                  'length',\n",
    "                                  'width',\n",
    "                                  'height',\n",
    "                                  'weight',\n",
    "                                  'engine-size',\n",
    "                                  'bore',\n",
    "                                  'stroke',\n",
    "                                  'compression-ratio',\n",
    "                                  'horsepower',\n",
    "                                  'peak-rpm',\n",
    "                                  'city-mpg',\n",
    "                                  'highway-mpg',\n",
    "                                  'price',\n",
    "                                  ]\n",
    "categorical_feature_names =       [\n",
    "                                  'make',\n",
    "                                  'fuel-type',\n",
    "                                  'aspiration',\n",
    "                                  'num-doors',\n",
    "                                  'body-style',\n",
    "                                  'drive-wheels',\n",
    "                                  'engine-location',\n",
    "                                  'engine-type',\n",
    "                                  'num-cylinders',\n",
    "                                   'fuel-system'\n",
    "                                  ]\n",
    "print(len(numeric_feature_names))\n",
    "print(len(categorical_feature_names))\n",
    "# The correct solution will pass these assert statements.\n",
    "assert len(numeric_feature_names) == 15\n",
    "assert len(categorical_feature_names) == 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "form",
    "id": "lLFkHgBm8O1Y"
   },
   "outputs": [],
   "source": [
    "#@title Solution (to view code, from cell's menu, select Form -> Show Code)\n",
    "numeric_feature_names = ['symboling', 'normalized-losses', 'wheel-base',\n",
    "        'length', 'width', 'height', 'weight', 'engine-size', 'horsepower',\n",
    "        'peak-rpm', 'city-mpg', 'highway-mpg', 'bore', 'stroke',\n",
    "         'compression-ratio']\n",
    "\n",
    "categorical_feature_names = list(set(feature_names) - set(numeric_feature_names) - set([LABEL]))\n",
    "\n",
    "assert len(numeric_feature_names) == 15\n",
    "assert len(categorical_feature_names) == 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 419
    },
    "id": "nabeQFGBpDEN",
    "outputId": "67db414c-0962-49af-e0c4-00ca031b17f6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symboling</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>engine-size</th>\n",
       "      <th>bore</th>\n",
       "      <th>stroke</th>\n",
       "      <th>compression-ratio</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>peak-rpm</th>\n",
       "      <th>city-mpg</th>\n",
       "      <th>highway-mpg</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>2</td>\n",
       "      <td>97.30</td>\n",
       "      <td>171.70</td>\n",
       "      <td>65.50</td>\n",
       "      <td>55.70</td>\n",
       "      <td>2209</td>\n",
       "      <td>109</td>\n",
       "      <td>3.19</td>\n",
       "      <td>3.40</td>\n",
       "      <td>9.00</td>\n",
       "      <td>85</td>\n",
       "      <td>5250</td>\n",
       "      <td>27</td>\n",
       "      <td>34</td>\n",
       "      <td>7975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>0</td>\n",
       "      <td>95.70</td>\n",
       "      <td>169.70</td>\n",
       "      <td>63.60</td>\n",
       "      <td>59.10</td>\n",
       "      <td>2290</td>\n",
       "      <td>92</td>\n",
       "      <td>3.05</td>\n",
       "      <td>3.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>62</td>\n",
       "      <td>4800</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "      <td>7898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>0</td>\n",
       "      <td>107.90</td>\n",
       "      <td>186.70</td>\n",
       "      <td>68.40</td>\n",
       "      <td>56.70</td>\n",
       "      <td>3252</td>\n",
       "      <td>152</td>\n",
       "      <td>3.70</td>\n",
       "      <td>3.52</td>\n",
       "      <td>21.00</td>\n",
       "      <td>95</td>\n",
       "      <td>4150</td>\n",
       "      <td>28</td>\n",
       "      <td>33</td>\n",
       "      <td>17950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>0</td>\n",
       "      <td>95.70</td>\n",
       "      <td>166.30</td>\n",
       "      <td>64.40</td>\n",
       "      <td>52.80</td>\n",
       "      <td>2122</td>\n",
       "      <td>98</td>\n",
       "      <td>3.19</td>\n",
       "      <td>3.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>70</td>\n",
       "      <td>4800</td>\n",
       "      <td>28</td>\n",
       "      <td>34</td>\n",
       "      <td>8358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>98.80</td>\n",
       "      <td>177.80</td>\n",
       "      <td>66.50</td>\n",
       "      <td>55.50</td>\n",
       "      <td>2443</td>\n",
       "      <td>122</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.39</td>\n",
       "      <td>22.70</td>\n",
       "      <td>64</td>\n",
       "      <td>4650</td>\n",
       "      <td>36</td>\n",
       "      <td>42</td>\n",
       "      <td>10795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>3</td>\n",
       "      <td>95.30</td>\n",
       "      <td>169.00</td>\n",
       "      <td>65.70</td>\n",
       "      <td>49.60</td>\n",
       "      <td>2380</td>\n",
       "      <td>70</td>\n",
       "      <td>?</td>\n",
       "      <td>?</td>\n",
       "      <td>9.40</td>\n",
       "      <td>101</td>\n",
       "      <td>6000</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>10945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>3</td>\n",
       "      <td>96.30</td>\n",
       "      <td>173.00</td>\n",
       "      <td>65.40</td>\n",
       "      <td>49.40</td>\n",
       "      <td>2370</td>\n",
       "      <td>110</td>\n",
       "      <td>3.17</td>\n",
       "      <td>3.46</td>\n",
       "      <td>7.50</td>\n",
       "      <td>116</td>\n",
       "      <td>5500</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>9959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>2</td>\n",
       "      <td>93.70</td>\n",
       "      <td>157.30</td>\n",
       "      <td>64.40</td>\n",
       "      <td>50.80</td>\n",
       "      <td>1918</td>\n",
       "      <td>92</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.23</td>\n",
       "      <td>9.40</td>\n",
       "      <td>68</td>\n",
       "      <td>5500</td>\n",
       "      <td>37</td>\n",
       "      <td>41</td>\n",
       "      <td>5389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1</td>\n",
       "      <td>93.70</td>\n",
       "      <td>150.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>52.60</td>\n",
       "      <td>1940</td>\n",
       "      <td>92</td>\n",
       "      <td>2.91</td>\n",
       "      <td>3.41</td>\n",
       "      <td>9.20</td>\n",
       "      <td>76</td>\n",
       "      <td>6000</td>\n",
       "      <td>30</td>\n",
       "      <td>34</td>\n",
       "      <td>6529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>98.80</td>\n",
       "      <td>177.80</td>\n",
       "      <td>66.50</td>\n",
       "      <td>55.50</td>\n",
       "      <td>2410</td>\n",
       "      <td>122</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.39</td>\n",
       "      <td>8.60</td>\n",
       "      <td>84</td>\n",
       "      <td>4800</td>\n",
       "      <td>26</td>\n",
       "      <td>32</td>\n",
       "      <td>8495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>205 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     symboling  wheel-base  length  ...  city-mpg  highway-mpg  price\n",
       "183          2       97.30  171.70  ...        27           34   7975\n",
       "154          0       95.70  169.70  ...        27           32   7898\n",
       "116          0      107.90  186.70  ...        28           33  17950\n",
       "161          0       95.70  166.30  ...        28           34   8358\n",
       "63           0       98.80  177.80  ...        36           42  10795\n",
       "..         ...         ...     ...  ...       ...          ...    ...\n",
       "55           3       95.30  169.00  ...        17           23  10945\n",
       "80           3       96.30  173.00  ...        23           30   9959\n",
       "76           2       93.70  157.30  ...        37           41   5389\n",
       "33           1       93.70  150.00  ...        30           34   6529\n",
       "60           0       98.80  177.80  ...        26           32   8495\n",
       "\n",
       "[205 rows x 15 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run to inspect numeric features.\n",
    "car_data[numeric_feature_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 419
    },
    "id": "b1ss9Q7mpiBy",
    "outputId": "da345e2a-8595-4070-9995-9b385d67c659"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>make</th>\n",
       "      <th>fuel-type</th>\n",
       "      <th>aspiration</th>\n",
       "      <th>num-doors</th>\n",
       "      <th>body-style</th>\n",
       "      <th>drive-wheels</th>\n",
       "      <th>engine-location</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-cylinders</th>\n",
       "      <th>fuel-system</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>volkswagen</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>mpfi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>toyota</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>wagon</td>\n",
       "      <td>4wd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>2bbl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>peugot</td>\n",
       "      <td>diesel</td>\n",
       "      <td>turbo</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>l</td>\n",
       "      <td>four</td>\n",
       "      <td>idi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>toyota</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>2bbl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>mazda</td>\n",
       "      <td>diesel</td>\n",
       "      <td>std</td>\n",
       "      <td>?</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>idi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>mazda</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>rwd</td>\n",
       "      <td>front</td>\n",
       "      <td>rotor</td>\n",
       "      <td>two</td>\n",
       "      <td>4bbl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>mitsubishi</td>\n",
       "      <td>gas</td>\n",
       "      <td>turbo</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>spdi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>mitsubishi</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>2bbl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>honda</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>two</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>1bbl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>mazda</td>\n",
       "      <td>gas</td>\n",
       "      <td>std</td>\n",
       "      <td>four</td>\n",
       "      <td>sedan</td>\n",
       "      <td>fwd</td>\n",
       "      <td>front</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>2bbl</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>205 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           make fuel-type aspiration  ... engine-type num-cylinders fuel-system\n",
       "183  volkswagen       gas        std  ...         ohc          four        mpfi\n",
       "154      toyota       gas        std  ...         ohc          four        2bbl\n",
       "116      peugot    diesel      turbo  ...           l          four         idi\n",
       "161      toyota       gas        std  ...         ohc          four        2bbl\n",
       "63        mazda    diesel        std  ...         ohc          four         idi\n",
       "..          ...       ...        ...  ...         ...           ...         ...\n",
       "55        mazda       gas        std  ...       rotor           two        4bbl\n",
       "80   mitsubishi       gas      turbo  ...         ohc          four        spdi\n",
       "76   mitsubishi       gas        std  ...         ohc          four        2bbl\n",
       "33        honda       gas        std  ...         ohc          four        1bbl\n",
       "60        mazda       gas        std  ...         ohc          four        2bbl\n",
       "\n",
       "[205 rows x 10 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run to inspect categorical features.\n",
    "car_data[categorical_feature_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6OjDegBgqNnu"
   },
   "outputs": [],
   "source": [
    "# Coerce the numeric features to numbers. This is necessary because the model\n",
    "# crashes because not all the values are numeric.\n",
    "for feature_name in numeric_feature_names + [LABEL]:\n",
    "  car_data[feature_name] = pd.to_numeric(car_data[feature_name], errors='coerce')\n",
    "\n",
    "# Fill missing values with 0.\n",
    "# Is this an OK thing to do? You may want to come back and revisit this decision later.\n",
    "car_data.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Uq-t-8GPvnCW"
   },
   "source": [
    "## Task 1: Make your best model with numeric features. No normalization allowed.\n",
    "\n",
    "Modify the model provided below to achieve the lowest eval loss. You may want to change various hyperparameters:\n",
    "- learning rate\n",
    "- choice of optimizer\n",
    "- hidden layer dimensions -- make sure your choice here makes sense given the number of training examples\n",
    "- batch size\n",
    "- num training steps\n",
    "- (anything else you can think of changing)\n",
    "\n",
    "Do not use the `normalizer_fn` arg on `numeric_column`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JH6KJp-4-E_Q",
    "outputId": "41d66a73-d776-4f0b-bd07-1584b17fb131"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['symboling', 'wheel-base', 'length', 'width', 'height', 'weight', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']\n",
      "model_feature_columns [NumericColumn(key='symboling', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='wheel-base', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='length', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='width', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='height', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='weight', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='engine-size', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='bore', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='stroke', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='compression-ratio', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='horsepower', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='peak-rpm', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='city-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='highway-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='price', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmppt1zhpbv\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmppt1zhpbv', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "10000\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 0...\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmppt1zhpbv/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 0...\n",
      "INFO:tensorflow:loss = 2472508400.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 297.927\n",
      "INFO:tensorflow:loss = 42418.887, step = 101 (0.339 sec)\n",
      "INFO:tensorflow:global_step/sec: 325.664\n",
      "INFO:tensorflow:loss = 13572.961, step = 201 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.102\n",
      "INFO:tensorflow:loss = 10081.33, step = 301 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.867\n",
      "INFO:tensorflow:loss = 15413.074, step = 401 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.25\n",
      "INFO:tensorflow:loss = 11021.509, step = 501 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.434\n",
      "INFO:tensorflow:loss = 788.91345, step = 601 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.052\n",
      "INFO:tensorflow:loss = 2327.8875, step = 701 (0.286 sec)\n",
      "INFO:tensorflow:global_step/sec: 360.911\n",
      "INFO:tensorflow:loss = 4130.2866, step = 801 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.447\n",
      "INFO:tensorflow:loss = 4717.9946, step = 901 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.574\n",
      "INFO:tensorflow:loss = 5159.3535, step = 1001 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.923\n",
      "INFO:tensorflow:loss = 1356.5936, step = 1101 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.362\n",
      "INFO:tensorflow:loss = 836.8854, step = 1201 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.488\n",
      "INFO:tensorflow:loss = 3098.525, step = 1301 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.588\n",
      "INFO:tensorflow:loss = 691.8207, step = 1401 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.771\n",
      "INFO:tensorflow:loss = 1212.0188, step = 1501 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.285\n",
      "INFO:tensorflow:loss = 1985.1924, step = 1601 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.18\n",
      "INFO:tensorflow:loss = 4127.204, step = 1701 (0.305 sec)\n",
      "INFO:tensorflow:global_step/sec: 325.512\n",
      "INFO:tensorflow:loss = 2568.4592, step = 1801 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.701\n",
      "INFO:tensorflow:loss = 3930.3281, step = 1901 (0.296 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.326\n",
      "INFO:tensorflow:loss = 3237.8413, step = 2001 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.462\n",
      "INFO:tensorflow:loss = 2964.951, step = 2101 (0.320 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.423\n",
      "INFO:tensorflow:loss = 825.03186, step = 2201 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 337.511\n",
      "INFO:tensorflow:loss = 893.5094, step = 2301 (0.300 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.75\n",
      "INFO:tensorflow:loss = 3175.5327, step = 2401 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.925\n",
      "INFO:tensorflow:loss = 4174.667, step = 2501 (0.312 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.888\n",
      "INFO:tensorflow:loss = 1244.7444, step = 2601 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.4\n",
      "INFO:tensorflow:loss = 3817.266, step = 2701 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.581\n",
      "INFO:tensorflow:loss = 1853.4014, step = 2801 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 364.564\n",
      "INFO:tensorflow:loss = 2835.3213, step = 2901 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.76\n",
      "INFO:tensorflow:loss = 1870.6677, step = 3001 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 337.387\n",
      "INFO:tensorflow:loss = 1223.0266, step = 3101 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 337.27\n",
      "INFO:tensorflow:loss = 6599.354, step = 3201 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.102\n",
      "INFO:tensorflow:loss = 796.6554, step = 3301 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.096\n",
      "INFO:tensorflow:loss = 423.9719, step = 3401 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.945\n",
      "INFO:tensorflow:loss = 1632.2544, step = 3501 (0.300 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.87\n",
      "INFO:tensorflow:loss = 352.49084, step = 3601 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.881\n",
      "INFO:tensorflow:loss = 1317.7025, step = 3701 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.442\n",
      "INFO:tensorflow:loss = 393.15988, step = 3801 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.887\n",
      "INFO:tensorflow:loss = 3362.1016, step = 3901 (0.303 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.864\n",
      "INFO:tensorflow:loss = 869.76935, step = 4001 (0.316 sec)\n",
      "INFO:tensorflow:global_step/sec: 306.909\n",
      "INFO:tensorflow:loss = 1879.2134, step = 4101 (0.322 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.267\n",
      "INFO:tensorflow:loss = 10392.155, step = 4201 (0.287 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.972\n",
      "INFO:tensorflow:loss = 419.62198, step = 4301 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.763\n",
      "INFO:tensorflow:loss = 622.2764, step = 4401 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.489\n",
      "INFO:tensorflow:loss = 3042.0881, step = 4501 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 399.014\n",
      "INFO:tensorflow:loss = 966.34576, step = 4601 (0.245 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.57\n",
      "INFO:tensorflow:loss = 2704.232, step = 4701 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.187\n",
      "INFO:tensorflow:loss = 954.5585, step = 4801 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.392\n",
      "INFO:tensorflow:loss = 668.5449, step = 4901 (0.300 sec)\n",
      "INFO:tensorflow:global_step/sec: 313.334\n",
      "INFO:tensorflow:loss = 1948.4166, step = 5001 (0.320 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.523\n",
      "INFO:tensorflow:loss = 428.85156, step = 5101 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.708\n",
      "INFO:tensorflow:loss = 2727.8403, step = 5201 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.829\n",
      "INFO:tensorflow:loss = 527.48486, step = 5301 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.908\n",
      "INFO:tensorflow:loss = 210.52199, step = 5401 (0.286 sec)\n",
      "INFO:tensorflow:global_step/sec: 362.602\n",
      "INFO:tensorflow:loss = 1282.2917, step = 5501 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.781\n",
      "INFO:tensorflow:loss = 265.46362, step = 5601 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.95\n",
      "INFO:tensorflow:loss = 788.66016, step = 5701 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 325.686\n",
      "INFO:tensorflow:loss = 1637.5709, step = 5801 (0.311 sec)\n",
      "INFO:tensorflow:global_step/sec: 334.855\n",
      "INFO:tensorflow:loss = 2977.2817, step = 5901 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.258\n",
      "INFO:tensorflow:loss = 1476.5017, step = 6001 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.312\n",
      "INFO:tensorflow:loss = 863.1658, step = 6101 (0.304 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.174\n",
      "INFO:tensorflow:loss = 371.8216, step = 6201 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.26\n",
      "INFO:tensorflow:loss = 535.80493, step = 6301 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.415\n",
      "INFO:tensorflow:loss = 195.5098, step = 6401 (0.304 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.877\n",
      "INFO:tensorflow:loss = 933.4957, step = 6501 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.383\n",
      "INFO:tensorflow:loss = 2650.7244, step = 6601 (0.303 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.849\n",
      "INFO:tensorflow:loss = 592.6432, step = 6701 (0.305 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.997\n",
      "INFO:tensorflow:loss = 528.96436, step = 6801 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.564\n",
      "INFO:tensorflow:loss = 566.11346, step = 6901 (0.304 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.437\n",
      "INFO:tensorflow:loss = 1670.7699, step = 7001 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 311.2\n",
      "INFO:tensorflow:loss = 1380.7914, step = 7101 (0.321 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.324\n",
      "INFO:tensorflow:loss = 822.6045, step = 7201 (0.300 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.757\n",
      "INFO:tensorflow:loss = 426.8664, step = 7301 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.001\n",
      "INFO:tensorflow:loss = 278.93158, step = 7401 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.795\n",
      "INFO:tensorflow:loss = 1920.2186, step = 7501 (0.286 sec)\n",
      "INFO:tensorflow:global_step/sec: 315.994\n",
      "INFO:tensorflow:loss = 1028.1941, step = 7601 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 363.323\n",
      "INFO:tensorflow:loss = 1728.1047, step = 7701 (0.271 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.456\n",
      "INFO:tensorflow:loss = 2122.9702, step = 7801 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.418\n",
      "INFO:tensorflow:loss = 397.18158, step = 7901 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.567\n",
      "INFO:tensorflow:loss = 455.16354, step = 8001 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.699\n",
      "INFO:tensorflow:loss = 550.1759, step = 8101 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.626\n",
      "INFO:tensorflow:loss = 881.14575, step = 8201 (0.275 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.447\n",
      "INFO:tensorflow:loss = 249.22441, step = 8301 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.601\n",
      "INFO:tensorflow:loss = 1011.14856, step = 8401 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.002\n",
      "INFO:tensorflow:loss = 492.5978, step = 8501 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 320.921\n",
      "INFO:tensorflow:loss = 618.66034, step = 8601 (0.322 sec)\n",
      "INFO:tensorflow:global_step/sec: 315.367\n",
      "INFO:tensorflow:loss = 623.11285, step = 8701 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 308.888\n",
      "INFO:tensorflow:loss = 1626.908, step = 8801 (0.325 sec)\n",
      "INFO:tensorflow:global_step/sec: 334.04\n",
      "INFO:tensorflow:loss = 492.0515, step = 8901 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.347\n",
      "INFO:tensorflow:loss = 336.04462, step = 9001 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 311.774\n",
      "INFO:tensorflow:loss = 679.6897, step = 9101 (0.320 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.077\n",
      "INFO:tensorflow:loss = 2262.6465, step = 9201 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.755\n",
      "INFO:tensorflow:loss = 389.27954, step = 9301 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.48\n",
      "INFO:tensorflow:loss = 1965.7375, step = 9401 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 315.458\n",
      "INFO:tensorflow:loss = 1193.0402, step = 9501 (0.321 sec)\n",
      "INFO:tensorflow:global_step/sec: 337.751\n",
      "INFO:tensorflow:loss = 639.86975, step = 9601 (0.286 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.085\n",
      "INFO:tensorflow:loss = 153.23438, step = 9701 (0.286 sec)\n",
      "INFO:tensorflow:global_step/sec: 315.645\n",
      "INFO:tensorflow:loss = 1598.8704, step = 9801 (0.316 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.357\n",
      "INFO:tensorflow:loss = 281.7396, step = 9901 (0.293 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 10000...\n",
      "INFO:tensorflow:Saving checkpoints for 10000 into /tmp/tmppt1zhpbv/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 10000...\n",
      "INFO:tensorflow:Loss for final step: 753.931.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:06:26\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmppt1zhpbv/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29476s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:06:26\n",
      "INFO:tensorflow:Saving dict for global step 10000: average_loss = 30.111895, global_step = 10000, label/mean = 12949.43, loss = 474.84143, prediction/mean = 12948.418\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 10000: /tmp/tmppt1zhpbv/model.ckpt-10000\n",
      "scores {'average_loss': 30.111895, 'label/mean': 12949.43, 'loss': 474.84143, 'prediction/mean': 12948.418, 'global_step': 10000}\n"
     ]
    }
   ],
   "source": [
    "# This code \"works\", but because of bad hyperparameter choices it gets NaN loss\n",
    "# during training. Try fixing this.\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "print(numeric_feature_names)\n",
    "x_df = car_data[numeric_feature_names]\n",
    "y_series = car_data['price']\n",
    "\n",
    "# Create input_fn's so that the estimator knows how to read in your data.\n",
    "train_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    num_epochs=6000,\n",
    "    shuffle=True)\n",
    "\n",
    "eval_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "# Feature columns allow the model to parse the data, perform common\n",
    "# preprocessing, and automatically generate an input layer for the tf.Estimator.\n",
    "model_feature_columns = [\n",
    "    tf.feature_column.numeric_column(feature_name) for feature_name in numeric_feature_names\n",
    "]\n",
    "print('model_feature_columns', model_feature_columns)\n",
    "\n",
    "est = tf.estimator.DNNRegressor(\n",
    "    feature_columns=model_feature_columns,\n",
    "    hidden_units=[128],\n",
    "    optimizer=tf.train.AdagradOptimizer(learning_rate=0.03),\n",
    "  )\n",
    "\n",
    "# TRAIN\n",
    "num_print_statements = 1\n",
    "num_training_steps = 10000\n",
    "print(num_training_steps // num_print_statements)\n",
    "for _ in range(num_print_statements):\n",
    "  est.train(train_input_fn, steps=num_training_steps // num_print_statements)\n",
    "  scores = est.evaluate(eval_input_fn)\n",
    "  \n",
    "  # The `scores` dictionary has several metrics automatically generated by the\n",
    "  # canned Estimator.\n",
    "  # `average_loss` is the average loss for an individual example.\n",
    "  # `loss` is the summed loss for the batch.\n",
    "  # In addition to these scalar losses, you may find the visualization functions\n",
    "  # in the next cell helpful for debugging model quality.\n",
    "  print('scores', scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "code",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3ptcfj_9Xi9M",
    "outputId": "aa02a029-4f94-4ce1-82d0-ee1ae636755d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['symboling', 'wheel-base', 'length', 'width', 'height', 'weight', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']\n",
      "model_feature_columns [NumericColumn(key='symboling', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='wheel-base', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='length', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='width', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='height', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='weight', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='engine-size', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='bore', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='stroke', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='compression-ratio', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='horsepower', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='peak-rpm', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='city-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='highway-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='price', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpiu3flg8b\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpiu3flg8b', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 0...\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 0...\n",
      "INFO:tensorflow:loss = 4575852500.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 327.197\n",
      "INFO:tensorflow:loss = 9163831.0, step = 101 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.246\n",
      "INFO:tensorflow:loss = 81810.97, step = 201 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.661\n",
      "INFO:tensorflow:loss = 290104.1, step = 301 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.559\n",
      "INFO:tensorflow:loss = 80705.164, step = 401 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 327.787\n",
      "INFO:tensorflow:loss = 269771.78, step = 501 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.094\n",
      "INFO:tensorflow:loss = 83015.83, step = 601 (0.303 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.538\n",
      "INFO:tensorflow:loss = 45778.508, step = 701 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.459\n",
      "INFO:tensorflow:loss = 90784.38, step = 801 (0.276 sec)\n",
      "INFO:tensorflow:global_step/sec: 327.607\n",
      "INFO:tensorflow:loss = 69567.27, step = 901 (0.318 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 1000...\n",
      "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 1000...\n",
      "INFO:tensorflow:Loss for final step: 170062.72.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:27\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-1000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29832s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:27\n",
      "INFO:tensorflow:Saving dict for global step 1000: average_loss = 3147.0107, global_step = 1000, label/mean = 12949.43, loss = 49625.938, prediction/mean = 12954.295\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 1000: /tmp/tmpiu3flg8b/model.ckpt-1000\n",
      "scores {'average_loss': 3147.0107, 'label/mean': 12949.43, 'loss': 49625.938, 'prediction/mean': 12954.295, 'global_step': 1000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-1000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 1000...\n",
      "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 1000...\n",
      "INFO:tensorflow:loss = 61842.184, step = 1001\n",
      "INFO:tensorflow:global_step/sec: 347.101\n",
      "INFO:tensorflow:loss = 30164.719, step = 1101 (0.296 sec)\n",
      "INFO:tensorflow:global_step/sec: 328.071\n",
      "INFO:tensorflow:loss = 34502.133, step = 1201 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.741\n",
      "INFO:tensorflow:loss = 46339.438, step = 1301 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.601\n",
      "INFO:tensorflow:loss = 23215.137, step = 1401 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 327.781\n",
      "INFO:tensorflow:loss = 10557.304, step = 1501 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.25\n",
      "INFO:tensorflow:loss = 30830.559, step = 1601 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.3\n",
      "INFO:tensorflow:loss = 7428.193, step = 1701 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.597\n",
      "INFO:tensorflow:loss = 27509.934, step = 1801 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.713\n",
      "INFO:tensorflow:loss = 21634.633, step = 1901 (0.285 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:Loss for final step: 30718.719.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:31\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.30847s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:32\n",
      "INFO:tensorflow:Saving dict for global step 2000: average_loss = 970.8487, global_step = 2000, label/mean = 12949.43, loss = 15309.537, prediction/mean = 12954.796\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 2000: /tmp/tmpiu3flg8b/model.ckpt-2000\n",
      "scores {'average_loss': 970.8487, 'label/mean': 12949.43, 'loss': 15309.537, 'prediction/mean': 12954.796, 'global_step': 2000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:loss = 14238.729, step = 2001\n",
      "INFO:tensorflow:global_step/sec: 319.557\n",
      "INFO:tensorflow:loss = 12665.686, step = 2101 (0.319 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.643\n",
      "INFO:tensorflow:loss = 7406.743, step = 2201 (0.296 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.858\n",
      "INFO:tensorflow:loss = 5661.7676, step = 2301 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 372.482\n",
      "INFO:tensorflow:loss = 13983.17, step = 2401 (0.269 sec)\n",
      "INFO:tensorflow:global_step/sec: 352.934\n",
      "INFO:tensorflow:loss = 14249.141, step = 2501 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.405\n",
      "INFO:tensorflow:loss = 7154.1636, step = 2601 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 351.372\n",
      "INFO:tensorflow:loss = 3769.5085, step = 2701 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.432\n",
      "INFO:tensorflow:loss = 10183.939, step = 2801 (0.307 sec)\n",
      "INFO:tensorflow:global_step/sec: 341.853\n",
      "INFO:tensorflow:loss = 13208.917, step = 2901 (0.286 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 3000...\n",
      "INFO:tensorflow:Saving checkpoints for 3000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 3000...\n",
      "INFO:tensorflow:Loss for final step: 5069.6904.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:36\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-3000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.31063s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:36\n",
      "INFO:tensorflow:Saving dict for global step 3000: average_loss = 524.1722, global_step = 3000, label/mean = 12949.43, loss = 8265.792, prediction/mean = 12945.928\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 3000: /tmp/tmpiu3flg8b/model.ckpt-3000\n",
      "scores {'average_loss': 524.1722, 'label/mean': 12949.43, 'loss': 8265.792, 'prediction/mean': 12945.928, 'global_step': 3000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-3000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 3000...\n",
      "INFO:tensorflow:Saving checkpoints for 3000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 3000...\n",
      "INFO:tensorflow:loss = 8391.296, step = 3001\n",
      "INFO:tensorflow:global_step/sec: 330.684\n",
      "INFO:tensorflow:loss = 4263.369, step = 3101 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.103\n",
      "INFO:tensorflow:loss = 10951.745, step = 3201 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.348\n",
      "INFO:tensorflow:loss = 5563.404, step = 3301 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 374.063\n",
      "INFO:tensorflow:loss = 11726.638, step = 3401 (0.266 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.762\n",
      "INFO:tensorflow:loss = 25488.215, step = 3501 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 320.526\n",
      "INFO:tensorflow:loss = 4461.1826, step = 3601 (0.312 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.038\n",
      "INFO:tensorflow:loss = 14259.908, step = 3701 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.789\n",
      "INFO:tensorflow:loss = 4601.0293, step = 3801 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.44\n",
      "INFO:tensorflow:loss = 12933.54, step = 3901 (0.303 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:Loss for final step: 3724.5952.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:41\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29123s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:41\n",
      "INFO:tensorflow:Saving dict for global step 4000: average_loss = 402.01932, global_step = 4000, label/mean = 12949.43, loss = 6339.5356, prediction/mean = 12945.238\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4000: /tmp/tmpiu3flg8b/model.ckpt-4000\n",
      "scores {'average_loss': 402.01932, 'label/mean': 12949.43, 'loss': 6339.5356, 'prediction/mean': 12945.238, 'global_step': 4000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:loss = 4114.256, step = 4001\n",
      "INFO:tensorflow:global_step/sec: 338.908\n",
      "INFO:tensorflow:loss = 3023.0137, step = 4101 (0.303 sec)\n",
      "INFO:tensorflow:global_step/sec: 372.192\n",
      "INFO:tensorflow:loss = 8090.462, step = 4201 (0.264 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.961\n",
      "INFO:tensorflow:loss = 2478.161, step = 4301 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 356.137\n",
      "INFO:tensorflow:loss = 5580.9316, step = 4401 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.415\n",
      "INFO:tensorflow:loss = 3727.98, step = 4501 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.077\n",
      "INFO:tensorflow:loss = 11064.809, step = 4601 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.038\n",
      "INFO:tensorflow:loss = 3515.3591, step = 4701 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.352\n",
      "INFO:tensorflow:loss = 6007.6426, step = 4801 (0.305 sec)\n",
      "INFO:tensorflow:global_step/sec: 317.454\n",
      "INFO:tensorflow:loss = 4342.627, step = 4901 (0.308 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 5000...\n",
      "INFO:tensorflow:Saving checkpoints for 5000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 5000...\n",
      "INFO:tensorflow:Loss for final step: 1927.8259.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:45\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-5000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.30228s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:45\n",
      "INFO:tensorflow:Saving dict for global step 5000: average_loss = 327.8608, global_step = 5000, label/mean = 12949.43, loss = 5170.113, prediction/mean = 12949.381\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 5000: /tmp/tmpiu3flg8b/model.ckpt-5000\n",
      "scores {'average_loss': 327.8608, 'label/mean': 12949.43, 'loss': 5170.113, 'prediction/mean': 12949.381, 'global_step': 5000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-5000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 5000...\n",
      "INFO:tensorflow:Saving checkpoints for 5000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 5000...\n",
      "INFO:tensorflow:loss = 3709.505, step = 5001\n",
      "INFO:tensorflow:global_step/sec: 317.874\n",
      "INFO:tensorflow:loss = 9846.764, step = 5101 (0.325 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.609\n",
      "INFO:tensorflow:loss = 2384.7231, step = 5201 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.249\n",
      "INFO:tensorflow:loss = 1704.2529, step = 5301 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.36\n",
      "INFO:tensorflow:loss = 8933.329, step = 5401 (0.303 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.171\n",
      "INFO:tensorflow:loss = 2316.7002, step = 5501 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.59\n",
      "INFO:tensorflow:loss = 3400.4153, step = 5601 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.646\n",
      "INFO:tensorflow:loss = 5356.4434, step = 5701 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.381\n",
      "INFO:tensorflow:loss = 3127.9883, step = 5801 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.638\n",
      "INFO:tensorflow:loss = 1694.1553, step = 5901 (0.290 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:Loss for final step: 11459.432.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:50\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29827s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:51\n",
      "INFO:tensorflow:Saving dict for global step 6000: average_loss = 286.88705, global_step = 6000, label/mean = 12949.43, loss = 4523.988, prediction/mean = 12950.195\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 6000: /tmp/tmpiu3flg8b/model.ckpt-6000\n",
      "scores {'average_loss': 286.88705, 'label/mean': 12949.43, 'loss': 4523.988, 'prediction/mean': 12950.195, 'global_step': 6000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:loss = 3230.6655, step = 6001\n",
      "INFO:tensorflow:global_step/sec: 320.43\n",
      "INFO:tensorflow:loss = 1953.8718, step = 6101 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 364.13\n",
      "INFO:tensorflow:loss = 2898.3782, step = 6201 (0.276 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.889\n",
      "INFO:tensorflow:loss = 2354.0286, step = 6301 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.032\n",
      "INFO:tensorflow:loss = 18500.744, step = 6401 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 363.195\n",
      "INFO:tensorflow:loss = 4962.739, step = 6501 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.35\n",
      "INFO:tensorflow:loss = 3150.589, step = 6601 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.016\n",
      "INFO:tensorflow:loss = 2407.1765, step = 6701 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.238\n",
      "INFO:tensorflow:loss = 12152.133, step = 6801 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.063\n",
      "INFO:tensorflow:loss = 4450.4795, step = 6901 (0.299 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 7000...\n",
      "INFO:tensorflow:Saving checkpoints for 7000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 7000...\n",
      "INFO:tensorflow:Loss for final step: 2983.6516.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:53:55\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-7000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.33162s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:53:55\n",
      "INFO:tensorflow:Saving dict for global step 7000: average_loss = 256.48074, global_step = 7000, label/mean = 12949.43, loss = 4044.5042, prediction/mean = 12948.896\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 7000: /tmp/tmpiu3flg8b/model.ckpt-7000\n",
      "scores {'average_loss': 256.48074, 'label/mean': 12949.43, 'loss': 4044.5042, 'prediction/mean': 12948.896, 'global_step': 7000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-7000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 7000...\n",
      "INFO:tensorflow:Saving checkpoints for 7000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 7000...\n",
      "INFO:tensorflow:loss = 7027.558, step = 7001\n",
      "INFO:tensorflow:global_step/sec: 294.104\n",
      "INFO:tensorflow:loss = 3934.8892, step = 7101 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 302.833\n",
      "INFO:tensorflow:loss = 3585.7864, step = 7201 (0.335 sec)\n",
      "INFO:tensorflow:global_step/sec: 366.16\n",
      "INFO:tensorflow:loss = 5130.6304, step = 7301 (0.270 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.399\n",
      "INFO:tensorflow:loss = 3186.6138, step = 7401 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.316\n",
      "INFO:tensorflow:loss = 2170.5566, step = 7501 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 369.346\n",
      "INFO:tensorflow:loss = 4118.0625, step = 7601 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.469\n",
      "INFO:tensorflow:loss = 6683.4106, step = 7701 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.796\n",
      "INFO:tensorflow:loss = 1941.7097, step = 7801 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 334.174\n",
      "INFO:tensorflow:loss = 2403.688, step = 7901 (0.303 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:Loss for final step: 11981.287.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:54:00\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.30037s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:54:00\n",
      "INFO:tensorflow:Saving dict for global step 8000: average_loss = 239.88184, global_step = 8000, label/mean = 12949.43, loss = 3782.7522, prediction/mean = 12950.935\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 8000: /tmp/tmpiu3flg8b/model.ckpt-8000\n",
      "scores {'average_loss': 239.88184, 'label/mean': 12949.43, 'loss': 3782.7522, 'prediction/mean': 12950.935, 'global_step': 8000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:loss = 3165.8823, step = 8001\n",
      "INFO:tensorflow:global_step/sec: 298.551\n",
      "INFO:tensorflow:loss = 1984.3972, step = 8101 (0.358 sec)\n",
      "INFO:tensorflow:global_step/sec: 303.567\n",
      "INFO:tensorflow:loss = 2627.0476, step = 8201 (0.314 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.958\n",
      "INFO:tensorflow:loss = 3165.5073, step = 8301 (0.272 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.615\n",
      "INFO:tensorflow:loss = 3293.741, step = 8401 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.371\n",
      "INFO:tensorflow:loss = 6928.368, step = 8501 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.03\n",
      "INFO:tensorflow:loss = 2969.6729, step = 8601 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.966\n",
      "INFO:tensorflow:loss = 2982.0723, step = 8701 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 360.11\n",
      "INFO:tensorflow:loss = 5418.6016, step = 8801 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 334.405\n",
      "INFO:tensorflow:loss = 4215.8228, step = 8901 (0.292 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 9000...\n",
      "INFO:tensorflow:Saving checkpoints for 9000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 9000...\n",
      "INFO:tensorflow:Loss for final step: 2371.4058.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:54:04\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-9000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.32945s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:54:05\n",
      "INFO:tensorflow:Saving dict for global step 9000: average_loss = 218.84857, global_step = 9000, label/mean = 12949.43, loss = 3451.0737, prediction/mean = 12948.526\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 9000: /tmp/tmpiu3flg8b/model.ckpt-9000\n",
      "scores {'average_loss': 218.84857, 'label/mean': 12949.43, 'loss': 3451.0737, 'prediction/mean': 12948.526, 'global_step': 9000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-9000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 9000...\n",
      "INFO:tensorflow:Saving checkpoints for 9000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 9000...\n",
      "INFO:tensorflow:loss = 1776.0471, step = 9001\n",
      "INFO:tensorflow:global_step/sec: 336.419\n",
      "INFO:tensorflow:loss = 6268.9023, step = 9101 (0.308 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.741\n",
      "INFO:tensorflow:loss = 3212.584, step = 9201 (0.296 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.914\n",
      "INFO:tensorflow:loss = 8332.702, step = 9301 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.157\n",
      "INFO:tensorflow:loss = 2317.8306, step = 9401 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 285.822\n",
      "INFO:tensorflow:loss = 2852.0352, step = 9501 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.016\n",
      "INFO:tensorflow:loss = 5909.74, step = 9601 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.124\n",
      "INFO:tensorflow:loss = 1807.6014, step = 9701 (0.311 sec)\n",
      "INFO:tensorflow:global_step/sec: 341.481\n",
      "INFO:tensorflow:loss = 1763.7026, step = 9801 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.589\n",
      "INFO:tensorflow:loss = 2559.875, step = 9901 (0.290 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 10000...\n",
      "INFO:tensorflow:Saving checkpoints for 10000 into /tmp/tmpiu3flg8b/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 10000...\n",
      "INFO:tensorflow:Loss for final step: 2483.797.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T00:54:09\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpiu3flg8b/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29927s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-00:54:09\n",
      "INFO:tensorflow:Saving dict for global step 10000: average_loss = 202.7198, global_step = 10000, label/mean = 12949.43, loss = 3196.7354, prediction/mean = 12949.551\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 10000: /tmp/tmpiu3flg8b/model.ckpt-10000\n",
      "scores {'average_loss': 202.7198, 'label/mean': 12949.43, 'loss': 3196.7354, 'prediction/mean': 12949.551, 'global_step': 10000}\n"
     ]
    }
   ],
   "source": [
    "#@title Possible solution\n",
    "# Here is one possible solution:\n",
    "# The only necessary change to fix the NaN training loss was the choice of optimizer.\n",
    "\n",
    "# Changing other parameters could improve model quality, but take it with a\n",
    "# grain of salt. The dataset is very small.\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "print(numeric_feature_names)\n",
    "x_df = car_data[numeric_feature_names]\n",
    "y_series = car_data['price']\n",
    "\n",
    "train_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    num_epochs=None,\n",
    "    shuffle=True)\n",
    "\n",
    "eval_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "# Feature columns allow the model to parse the data, perform common\n",
    "# preprocessing, and automatically generate an input layer for the tf.Estimator.\n",
    "model_feature_columns = [\n",
    "    tf.feature_column.numeric_column(feature_name) for feature_name in numeric_feature_names\n",
    "]\n",
    "print('model_feature_columns', model_feature_columns)\n",
    "\n",
    "est = tf.estimator.DNNRegressor(\n",
    "    feature_columns=model_feature_columns,\n",
    "    hidden_units=[64],\n",
    "    optimizer=tf.train.AdagradOptimizer(learning_rate=0.01),\n",
    "  )\n",
    "\n",
    "# TRAIN\n",
    "num_print_statements = 10\n",
    "num_training_steps = 10000\n",
    "for _ in range(num_print_statements):\n",
    "  est.train(train_input_fn, steps=num_training_steps // num_print_statements)\n",
    "  scores = est.evaluate(eval_input_fn)\n",
    "  \n",
    "  # The `scores` dictionary has several metrics automatically generated by the \n",
    "  # canned Estimator.\n",
    "  # `average_loss` is the average loss for an individual example.\n",
    "  # `loss` is the summed loss for the batch.\n",
    "  # In addition to these scalar losses, you may find the visualization functions\n",
    "  # in the next cell helpful for debugging model quality.\n",
    "  print('scores', scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Rxto3DwsjYw4"
   },
   "source": [
    "### Visualize your model's predictions\n",
    "\n",
    "After you have a trained model, it may be helpful to understand how your model's inference differs from the actual data.\n",
    "\n",
    "This helper function `scatter_plot_inference` does that for you. Real data is in grey. Your model's predictions are in orange.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "uGSXwX2fju1N",
    "outputId": "b3ab447a-c6bb-452b-d885-8b462e8c9078"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmppt1zhpbv/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 972x1620 with 15 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "def scatter_plot_inference_grid(est, x_df, feature_names):\n",
    "  \"\"\"Plots the predictions of the model against each feature.\n",
    "  \n",
    "  Args:\n",
    "    est: The trained tf.Estimator.\n",
    "    x_df: The pandas dataframe with the input data (used to create\n",
    "      predict_input_fn).\n",
    "    feature_names: An iterable of string feature names to plot.\n",
    "  \"\"\"\n",
    "  def scatter_plot_inference(axis,\n",
    "                             x_axis_feature_name,\n",
    "                             y_axis_feature_name,\n",
    "                             predictions):\n",
    "    \"\"\"Generate one subplot.\"\"\"\n",
    "    # Plot the real data in grey.\n",
    "    y_axis_feature_name = 'price'\n",
    "    axis.set_ylabel(y_axis_feature_name)\n",
    "    axis.set_xlabel(x_axis_feature_name)\n",
    "    axis.scatter(car_data[x_axis_feature_name],\n",
    "                 car_data[y_axis_feature_name],\n",
    "                 c='grey')\n",
    "\n",
    "    # Plot the predicted data in orange.\n",
    "    axis.scatter(car_data[x_axis_feature_name], predictions, c='orange')\n",
    "\n",
    "  predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "  predictions = [\n",
    "    x['predictions'][0]\n",
    "    for x in est.predict(predict_input_fn)\n",
    "  ]\n",
    "  \n",
    "  num_cols = 3\n",
    "  num_rows = int(math.ceil(len(feature_names)/float(num_cols)))\n",
    "  f, axarr = plt.subplots(num_rows, num_cols)\n",
    "  size = 4.5\n",
    "  f.set_size_inches(num_cols*size, num_rows*size)\n",
    "  \n",
    "  for i, feature_name in enumerate(numeric_feature_names):\n",
    "    axis = axarr[int(i/num_cols), i%num_cols]\n",
    "    scatter_plot_inference(axis, feature_name, 'price', predictions)\n",
    "  plt.show()\n",
    "\n",
    "scatter_plot_inference_grid(est, x_df, numeric_feature_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uBZI8f_8Yfph"
   },
   "source": [
    "## Task 2: Take your best numeric model from earlier. Add normalization.\n",
    "\n",
    "### Add normalization to your best numeric model from earlier\n",
    "\n",
    "- You decide what type of normalization to add, and for which features\n",
    "- You will need to use the `normalizer_fn` arg on [`numeric_column`](https://g3doc.corp.google.com/learning/brain/public/g3doc/api_docs/python/tf/feature_column/numeric_column.md?cl=head)\n",
    "    - An example of a silly normalizer_fn that shifts inputs down by 1, and then negates the value:\n",
    "    \n",
    "         normalizer_fn = lambda x: tf.neg(tf.subtract(x, 1))\n",
    "\n",
    "- You may find these pandas functions helpful:\n",
    "    - dataframe.mean()['your_feature_name']\n",
    "    - dataframe.std()['your_feature_name']\n",
    "- You will need to retune the hyperparameters from earlier.\n",
    "\n",
    "\n",
    "**Does normalization improve model quality on this dataset? Why or why not?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "jY_C_QgcZg1-",
    "outputId": "59fee58d-1859-42c8-8431-4a942a5e1508"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEICAYAAABGaK+TAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAVf0lEQVR4nO3dYZAkd3nf8e8PhOCixSdAsDlOKp9cYByiM8JaYwhJvCvAJRAFuIqioAglBfCBEyhiX2wL8sLYDokwCBlXSJVlJHMvgIUIFLAAGxlYKCpBsAeCkxAOinwEHeIUgqSwWBF18OTF9MGyN3s7uzN7vf/V91M1tdP/6el+ntvp3/X0znSnqpAktedBfRcgSdoYA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuJqW5HCSZ27gebckmd3MdUibzQDXA1JV/eOqWhh3OUlmk9wxgZKkdTPAJalRBri2g/OTfCXJvUnel+RhAEmem+SmJPck+W9JfvH4E5YfFkmyI8mBJHcnuTXJ7w7Zqz5hHUnOAD4GPDbJUnd77CnrWg94Bri2gxcBFwHnAr8IXJrkycA1wKuARwF/Bnw4yUOHPP/3gT3AzwHPAv7FKOuoqu8Dzwa+VVVT3e1bk2xMOhkDXNvBn1bVt6rqu8BfAucD+4A/q6obq+qHVXUAuB946pDnvwj4D1V1d1XdAfzpiOuQemWAazv49rL7fw9MAT8L7O8On9yT5B7gHGDYIY7HAt9cNv3NIfMMW4fUKwNc29U3gTdV1ZnLbv+gqt47ZN47gbOXTZ+zjvV4Ok/1xgDXdvXnwKuT/EoGzkhycZKHD5n3/cDrkzwiyW7gNetYz1HgUUl2TqJoaT0McG1LVbUI/Abwn4C7gduAS1eZ/Q+BO4C/A/4GuJbB8fJR1vM14L3A7d2hGj+FolMmXtBB+mlJfhN4cVX9at+1SCfjHrge8JLsSvL0JA9K8gRgP3Bd33VJazmt7wKkLeB0Bp8TPxe4B5gH/nOvFUkj8BCKJDXKQyiS1KhTegjlrLPOqj179kxsed///vc544wzJra8PtnL1rNd+gB72apG7eXgwYPfqapHrxw/pQG+Z88eFhcXJ7a8hYUFZmdnJ7a8PtnL1rNd+gB72apG7SXJN4aNewhFkhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIa5dkIJWDPZR85YWz/3mNcOmR80g5ffvGmr0Pbk3vgktSokQM8yYOTfCnJ9d30uUluTHJbkvclOX3zypQkrbSePfDXAbcum34zcGVVPY7BNQdfMcnCJEknN1KAJzkbuBh4Zzcd4EIGF38FOAC8YDMKlCQNN9IVeZJcC/xH4OHAv2Vwde/PdXvfJDkH+FhVnTfkufuAfQDT09MXzM/PT6z4paUlpqamJra8PtlLvw4dufeEsekdcPS+zV/33t07N30dLf5OVvNA7GVubu5gVc2sHF/zUyhJngvcVVUHk8yut8Cqugq4CmBmZqYmeR7fB+J5gVvQYi/DPm2yf+8xrji0+R/UOvzS2U1fR4u/k9XYy0+M8up8OvC8JM8BHgb8DPB24Mwkp1XVMeBs4MiGq5Akrduax8Cr6vVVdXZV7QFeDHyyql4KfAp4YTfbJcCHNq1KSdIJxvkc+O8Bv53kNuBRwNWTKUmSNIp1HeCrqgVgobt/O/CUyZckSRqF38SUpEYZ4JLUKANckhplgEtSozydrNSzYaeynbRhp8b1NLbtcw9ckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElq1JoBnuRhST6f5MtJbknyB934u5L8XZKbutv5m1+uJOm4UU5mdT9wYVUtJXkI8NkkH+se+52qunbzypMkrWbNAK+qApa6yYd0t9rMoiRJa8sgn9eYKXkwcBB4HPCOqvq9JO8CnsZgD/0TwGVVdf+Q5+4D9gFMT09fMD8/P7Hil5aWmJqamtjy+mQv/Tp05N4TxqZ3wNH7eihmEwzrZe/unf0UM6YWX1+rGbWXubm5g1U1s3J8pAD/8czJmcB1wGuB/wN8GzgduAr4n1X1hyd7/szMTC0uLo68vrUsLCwwOzs7seX1yV76Neyc3Pv3HuOKQ9vjlPnDemn1fOAtvr5WM2ovSYYG+Lo+hVJV9wCfAi6qqjtr4H7gL/AK9ZJ0So3yKZRHd3veJNkBPAv4WpJd3ViAFwA3b2ahkqSfNsr7w13Age44+IOA91fV9Uk+meTRQICbgFdvYp2SpBVG+RTKV4AnDxm/cFMqkiSNxG9iSlKjDHBJapQBLkmNMsAlqVHb41sK2jaGfaFG0nDugUtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0a5ZJqD0vy+SRfTnJLkj/oxs9NcmOS25K8L8npm1+uJOm4UfbA7wcurKonAecDFyV5KvBm4MqqehxwN/CKzStTkrTSmgHeXXl+qZt8SHcr4ELg2m78AIMLG0uSTpFU1dozDS5ofBB4HPAO4C3A57q9b5KcA3ysqs4b8tx9wD6A6enpC+bn5ydW/NLSElNTUxNbXp/sZeDQkXsnXM3GTe+Ao/f1XcVkDOtl7+6d/RQzpgfitjI3N3ewqmZWjo90PvCq+iFwfpIzgeuAXxi1wKq6CrgKYGZmpmZnZ0d96poWFhaY5PL6ZC8Dl26h84Hv33uMKw5tj1PmD+vl8Etn+ylmTG4rP7GuT6FU1T3Ap4CnAWcmOf6KOBs4suEqJEnrNsqnUB7d7XmTZAfwLOBWBkH+wm62S4APbVaRkqQTjfL+cBdwoDsO/iDg/VV1fZKvAvNJ/j3wJeDqTaxTkrTCmgFeVV8Bnjxk/HbgKZtRlCRpbX4TU5IaZYBLUqMMcElqlAEuSY3aHt9S2Kb29PSllsOXX9zLeiWtj3vgktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSo0a5pNo5ST6V5KtJbknyum78jUmOJLmpuz1n88uVJB03ysmsjgH7q+qLSR4OHExyQ/fYlVX11s0rT5K0mlEuqXYncGd3/3tJbgV2b3ZhkqSTW9cx8CR7GFwf88Zu6DVJvpLkmiSPmHBtkqSTSFWNNmMyBXwaeFNVfTDJNPAdoIA/AnZV1cuHPG8fsA9genr6gvn5+UnVztLSElNTUxNbXp+G9XLoyL09VTOe6R1w9L6+qxjfdukDhveyd/fOfooZ03bf7oeZm5s7WFUzK8dHCvAkDwGuB/66qt425PE9wPVVdd7JljMzM1OLi4trrm9UCwsLzM7OTmx5fRrWS18XdBjX/r3HuOJQ+9cK2S59wPBeWr1wx3bf7odJMjTAR/kUSoCrgVuXh3eSXctm+3Xg5lEKliRNxii7F08HXgYcSnJTN/YG4CVJzmdwCOUw8KpNqVCSNNQon0L5LJAhD3108uVIkkblNzElqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUaNcE/OcJJ9K8tUktyR5XTf+yCQ3JPl69/MRm1+uJOm4UfbAjwH7q+qJwFOBf53kicBlwCeq6vHAJ7ppSdIpsmaAV9WdVfXF7v73gFuB3cDzgQPdbAeAF2xWkZKkE6WqRp852QN8BjgP+F9VdWY3HuDu49MrnrMP2AcwPT19wfz8/PhVd5aWlpiamprY8vo0rJdDR+7tqZrxTO+Ao/f1XcX4tksfMLyXvbt39lPMmLb7dj/M3NzcwaqaWTk+coAnmQI+Dbypqj6Y5J7lgZ3k7qo66XHwmZmZWlxcHGl9o1hYWGB2dnZiy+vTsF72XPaRfooZ0/69x7ji0Gl9lzG27dIHDO/l8OUX91TNeLb7dj9MkqEBPtKnUJI8BPgA8O6q+mA3fDTJru7xXcBdoxYtSRrfKJ9CCXA1cGtVvW3ZQx8GLunuXwJ8aPLlSZJWM8r7w6cDLwMOJbmpG3sDcDnw/iSvAL4BvGhzSpQkDbNmgFfVZ4Gs8vAzJluOJGlUfhNTkhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktSoUS6pdk2Su5LcvGzsjUmOJLmpuz1nc8uUJK00yh74u4CLhoxfWVXnd7ePTrYsSdJa1gzwqvoM8N1TUIskaR1SVWvPlOwBrq+q87rpNwKXAv8XWAT2V9Xdqzx3H7APYHp6+oL5+fkJlD2wtLTE1NTUxJbXp2G9HDpyb0/VjGd6Bxy9r+8qxrdd+oCt18ve3Ts3/Nztvt0PMzc3d7CqZlaObzTAp4HvAAX8EbCrql6+1nJmZmZqcXFxzfWNamFhgdnZ2Yktr0/Detlz2Uf6KWZM+/ce44pDa14ve8vbLn3A1uvl8OUXb/i52327HybJ0ADf0KdQqupoVf2wqn4E/DnwlI0sR5K0cRsK8CS7lk3+OnDzavNKkjbHmu+pkrwXmAXOSnIH8PvAbJLzGRxCOQy8ahNrlCQNsWaAV9VLhgxfvQm1SJLWwW9iSlKjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIatWaAJ7kmyV1Jbl429sgkNyT5evfzEZtbpiRppVH2wN8FXLRi7DLgE1X1eOAT3bQk6RRaM8Cr6jPAd1cMPx840N0/ALxgwnVJktaQqlp7pmQPcH1VnddN31NVZ3b3A9x9fHrIc/cB+wCmp6cvmJ+fn0zlwNLSElNTUxNbXp+G9XLoyL09VTOe6R1w9L6+qxjfdukDtl4ve3fv3PBzt/t2P8zc3NzBqppZOb7mRY3XUlWVZNX/BarqKuAqgJmZmZqdnR13lT+2sLDAJJfXp2G9XHrZR/opZkz79x7jikNjv7R6t136gK3Xy+GXzm74udt9u1+PjX4K5WiSXQDdz7s2XIEkaUM2GuAfBi7p7l8CfGgy5UiSRjXKxwjfC/x34AlJ7kjyCuBy4FlJvg48s5uWJJ1Cax4Uq6qXrPLQMyZcy5a15xQci96/91izx7ylVpyKbXk1hy+/eOLL9JuYktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGjXWV0ySHge8BPwSODbtqsiRpc0ziMtVzVfWdCSxHkrQOHkKRpEaNG+AFfDzJwST7JlGQJGk0qaqNPznZXVVHkjwGuAF4bVV9ZsU8+4B9ANPT0xfMz8+PU+9PWVpaYmpqamLLW82hI/du+jqmd8DR+zZ9NafEdullu/QBW6+Xvbt3bvi542z3p2JbXs2wnkftZW5u7uCwvzGOFeA/taDkjcBSVb11tXlmZmZqcXFxIusDWFhYYHZ2dmLLW82puir9FYcm8SeJ/m2XXrZLH7D1ehnnCu3jbPdb7ar0o/aSZGiAb/gQSpIzkjz8+H3g14CbN7o8SdL6jPNf8jRwXZLjy3lPVf3VRKqSJK1pwwFeVbcDT5pgLZKkddg6B8UkPWCMcyx6/95jXNrjseytxM+BS1KjDHBJapQBLkmNMsAlqVHN/BFz2B89/GOGpAcy98AlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGjRXgSS5K8rdJbkty2aSKkiStbZyLGj8YeAfwbOCJwEuSPHFShUmSTm6cPfCnALdV1e1V9QNgHnj+ZMqSJK0lVbWxJyYvBC6qqld20y8DfqWqXrNivn3Avm7yCcDfbrzcE5wFfGeCy+uTvWw926UPsJetatRefraqHr1ycNPPB15VVwFXbcaykyxW1cxmLPtUs5etZ7v0AfayVY3byziHUI4A5yybPrsbkySdAuME+BeAxyc5N8npwIuBD0+mLEnSWjZ8CKWqjiV5DfDXwIOBa6rqlolVNppNOTTTE3vZerZLH2AvW9VYvWz4j5iSpH75TUxJapQBLkmNairAkzw4yZeSXN9NPyPJF5PclOSzSR7Xd42jSHI4yaGu7sVu7JFJbkjy9e7nI/qucxSr9PKWJF9L8pUk1yU5s+86RzGsl2WP7U9SSc7qq771WK2XJK/tfje3JPnjPmscxSqvr/OTfO74WJKn9F3nKJKcmeTa7t//1iRPG3u7r6pmbsBvA+8Bru+m/wfwj7r7/wp4V981jtjHYeCsFWN/DFzW3b8MeHPfdY7Ry68Bp3X339xyL934OQz+WP+NYY9vxdsqv5c54G+Ah3bTj+m7zg328XHg2d395wALfdc5Yi8HgFd2908Hzhx3u29mDzzJ2cDFwDuXDRfwM939ncC3TnVdE/R8Br9gup8v6LGWsVTVx6vqWDf5OQbfEWjZlcDvMni9tew3gcur6n6Aqrqr53o2qrntPslO4J8DVwNU1Q+q6h7G3O6bCXDgTxhsRD9aNvZK4KNJ7gBeBlzeR2EbUMDHkxzsTjUAMF1Vd3b3vw1M91Paug3rZbmXAx87xTVt1Am9JHk+cKSqvtxvaes27Pfy88A/S3Jjkk8n+eUe6xvVsD7+DfCWJN8E3gq8vrfqRncu8L+Bv+gOA78zyRmMud1v+lfpJyHJc4G7qupgktllD/0W8JyqujHJ7wBvYxDqW90/raojSR4D3JDka8sfrKpK0sre3gm9VNVnAJL8O+AY8O5eKxzdsN/LGxgcEmrNsF5OAx4JPBX4ZeD9SX6uuvfvW9SwPl4I/FZVfSDJixjs1T6z1yrXdhrwS8Bru7x6O4NDJj+2ke2+lT3wpwPPS3KYwVkPL0zyEeBJVXVjN8/7gH/SU33rUlVHup93AdcxOLPj0SS7ALqfTby9XaUXklwKPBd46RYPiB8b0suvMthz+nL32jsb+GKSf9hbkSNa5fdyB/DBGvg8g3ezW/qPsqv0cQnwwW6W/9KNbXV3AHcsy6trGQT6WNt9EwFeVa+vqrOrag+Dr+x/ksGxo51Jfr6b7VnArT2VOLIkZyR5+PH7DPbubmZwGoJLutkuAT7UT4WjW62XJBcxONz1vKr6+z5rHNUqvXyhqh5TVXu6194dwC9V1bd7LHVNJ3mN/VcGf8ik225OZwuf1e8kfXyLwX+uABcCX++nwtF1r5lvJnlCN/QM4KuMud03cQhlmBp8lf83gA8k+RFwN4PjrVvdNHBdEhj8+7+nqv4qyRcYvKV9BYNPO7yoxxpHtVovtwEPZfCWF+BzVfXq/socydBe+i1pw1b7vZwOXJPkZuAHwCVb/N3Ran0sAW9Pchrw//jJ6aq3utcC7+5+D7cD/5LBTvSGt3u/Si9JjWriEIok6UQGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWrU/wca+rvEnbp3NQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEICAYAAABGaK+TAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASjElEQVR4nO3df5Bdd13/8eeLhtLaxf6etaSVFKk4HYJY1lIGxA3Vr7VlbP1Oh6miplqNv8CqYSTKjPb71c4UZ4qWkRGD5Wt0GNJSyrRfKwrWro4/GkygkJZaG9ogjSUVbUrDt18g8PaPewLLdjd7c3f33n72Ph8zO3vP55xzz/udk33tuZ/7Y1NVSJLa86xRFyBJGowBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANcq1KS70nywJCP+a1JDiY5ZpjH1fiKrwOXpDZ5BS5JjTLANXJJnpfk/Un+I8nDSX6pG78myc1J/jTJk0nuSzI1a7/zknysW/e+JDcl+Z1u3XSSR2ZtuzfJm5J8IskT3bbHzVr/2iT3JDmQ5B+TvOQI9Z6fZGeSzyfZn+Rt3fi6JJVkTZJXdNMph7/+f5K93XbPSrIlyaeS/GfX4ynL/g+rVc8A10gleRbwf4GPA2uBC4FfTvID3SY/BGwHTgJuB/6g2+9Y4APAnwCnAO8FfniRw70OuAg4G3gJcGV3X98FvBv4WeBU4I+A25M8Z4H7uQG4oaq+Gfg24Oa5G1TVP1XVRFVNACcDO7oaAd4IXAZ8L/A84HHgHYvULj2NAa5R+27g9Kr631X1pap6CHgXcEW3/u+r6i+q6ivAnwHf2Y1fAKwB3l5VX66qW4GPLHKst1fVv1fVf9H7pfHSbnwT8EdVtaOqvlJV24AvdseYz5eBFyY5raoOVtXdix0XeBJ4S7f8c8BbquqRqvoicA1weZI1i9yP9A0McI3a84HndVMXB5IcAH4DmOzWf3bWtv8POK4LuucB++obn4X/zCLHmntfE7Nq2DynhrO6ul4/axrkg932VwHfDvxLkn9O8tqFDpjkZ4Fp4Eer6quzjveBWce6H/jKrJ6lvvgbX6P2GeDhqjpn7ook1xxhv0eBtUkyK8TPAj41YA3XVtW1C6x/z+yFqnoQ+JFu+ud/ArckOXXuTkm+B/ht4FVV9fk5x/upqvqHAWqVvsYrcI3aR4Ank7w5yfFJjkny4iTfvch+/0TvqvUN3ZOGlwLnD1jDu4CfS/Ly9JyQ5JIkz51v4yQ/luT07or6QDf81TnbnEVvbvwnqupf59zFO4Frkzy/2/b0rn7pqBjgGqlubvu19OajHwY+B/wxcOIi+32J3tXvVfRC9MeAP6c3d320NewEfobeE6SPA3vonuBcwEXAfUkO0ntC84qqemrONhfSmxK5ZdYUzH3duhvoPSH7oSRPAncDLz/auiXfyKNVI8kO4J1V9X9GXYs0DF6Bq1lJvjfJt3RTKBvpvTTwL0ddlzQsPomplr2I3jzzCcBDwOVV9ehoS5KGxykUSWqUUyiS1KihTqGcdtpptW7dOr7whS9wwgknDPPQIzEOfY5DjzAefY5Dj9Bmn7t27fpcVZ0+d3yoAb5u3Tp27tzJzMwM09PTwzz0SIxDn+PQI4xHn+PQI7TZZ5JPzzfuFIokNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKTyNcxLotdwy87+b1h7hyCfvvve6SgfeVtPp5BS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RG9RXgSX4lyX1J7k3y3iTHJTk7yY4ke5LclOTYlS5WkvR1iwZ4krXALwFTVfVi4BjgCuCtwO9V1QuBx4GrVrJQSdI36ncKZQ1wfJI1wDcBjwKvAW7p1m8DLlv+8iRJC0lVLb5RcjVwLfAU8CHgauDu7uqbJGcBH+yu0OfuuwnYBDA5Ofmy7du3c/DgQSYmJpavixW0e98TA+87eTzsf2rwY69fe+LgOw9JS+dyKcahz3HoEdrsc8OGDbuqamru+JrFdkxyMnApcDZwAHgfcFG/B66qrcBWgKmpqZqenmZmZobp6el+72Kkrtxyx8D7bl5/iOt3L/pPvKC9r58eeN9haelcLsU49DkOPcLq6rOfKZTvAx6uqv+oqi8DtwKvBE7qplQAzgT2rVCNkqR59BPg/wZckOSbkgS4EPgkcBdwebfNRuC2lSlRkjSfRQO8qnbQe7Lyo8Dubp+twJuBX02yBzgVuHEF65QkzdHXBG1V/RbwW3OGHwLOX/aKJEl98Z2YktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSo/oK8CQnJbklyb8kuT/JK5KckuTDSR7svp+80sVKkr6u3yvwG4C/rKrvAL4TuB/YAtxZVecAd3bLkqQhWTTAk5wIvBq4EaCqvlRVB4BLgW3dZtuAy1aqSEnS06WqjrxB8lJgK/BJelffu4CrgX1VdVK3TYDHDy/P2X8TsAlgcnLyZdu3b+fgwYNMTEwsayMrZfe+Jwbed/J42P/U4Mdev/bEwXcekpbO5VKMQ5/j0CO02eeGDRt2VdXU3PF+AnwKuBt4ZVXtSHID8HngjbMDO8njVXXEefCpqanauXMnMzMzTE9PD9LH0K3bcsfA+25ef4jrd68ZeP+9110y8L7D0tK5XIpx6HMceoQ2+0wyb4D3Mwf+CPBIVe3olm8BzgP2Jzmju/MzgMeWq1hJ0uIWDfCq+izwmSQv6oYupDedcjuwsRvbCNy2IhVKkubV7+P7NwLvSXIs8BDwk/TC/+YkVwGfBl63MiVKkubTV4BX1T3A0+Zf6F2NS5JGwHdiSlKjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1Kj1oy6AC1s3ZY7RnLcvdddMpLjSjo6XoFLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGtV3gCc5JsnHkvx5t3x2kh1J9iS5KcmxK1emJGmuo7kCvxq4f9byW4Hfq6oXAo8DVy1nYZKkI+srwJOcCVwC/HG3HOA1wC3dJtuAy1aiQEnS/Pq9Av994NeAr3bLpwIHqupQt/wIsHaZa5MkHUGq6sgbJK8FLq6qX0gyDbwJuBK4u5s+IclZwAer6sXz7L8J2AQwOTn5su3bt3Pw4EEmJiaWtZGVsnvfEwPvO3k87H9qGYsZkvVrT+x725bO5VKMQ5/j0CO02eeGDRt2VdXU3PF+Po3wlcAPJbkYOA74ZuAG4KQka7qr8DOBffPtXFVbga0AU1NTNT09zczMDNPT04N1MmRXLuETATevP8T1u9v7wMe9r5/ue9uWzuVSjEOf49AjrK4+F51Cqapfr6ozq2odcAXwN1X1euAu4PJus43AbStWpSTpaZbyOvA3A7+aZA+9OfEbl6ckSVI/jurxfVXNADPd7YeA85e/JElSP3wnpiQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUe39wUatuHVH8XdAN68/tKS/GzrX3usuWbb7klY7r8AlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDVq0QBPclaSu5J8Msl9Sa7uxk9J8uEkD3bfT175ciVJh/VzBX4I2FxV5wIXAL+Y5FxgC3BnVZ0D3NktS5KGZNEAr6pHq+qj3e0ngfuBtcClwLZus23AZStVpCTp6VJV/W+crAP+Dngx8G9VdVI3HuDxw8tz9tkEbAKYnJx82fbt2zl48CATExNLr34Idu97YuB9J4+H/U8tYzHPQMvd4/q1Jy7fnS2jlv7PDmoceoQ2+9ywYcOuqpqaO953gCeZAP4WuLaqbk1yYHZgJ3m8qo44Dz41NVU7d+5kZmaG6enpo+tgRNZtuWPgfTevP8T1u9csYzXPPMvd497rLlm2+1pOLf2fHdQ49Aht9plk3gDv61UoSZ4NvB94T1Xd2g3vT3JGt/4M4LHlKlaStLh+XoUS4Ebg/qp626xVtwMbu9sbgduWvzxJ0kL6eez7SuDHgd1J7unGfgO4Drg5yVXAp4HXrUyJkqT5LBrgVfX3QBZYfeHyliNJ6pfvxJSkRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVGr+4M61JylfPbMUjxTP4NFOhKvwCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUnwcusfjnkG9ef4grV+izyv0scg3KK3BJalQzV+Cj+kstkvRM5RW4JDXKAJekRhngktQoA1ySGmWAS1KjmnkViiQt1botd6zoa/oXslKv9fcKXJIa5RW4NGLPlPc4DPPK1HefLg+vwCWpUUsK8CQXJXkgyZ4kW5arKEnS4gYO8CTHAO8AfhA4F/iRJOcuV2GSpCNbyhX4+cCeqnqoqr4EbAcuXZ6yJEmLSVUNtmNyOXBRVf10t/zjwMur6g1zttsEbOoWXwQ8AJwGfG7QohsyDn2OQ48wHn2OQ4/QZp/Pr6rT5w6u+KtQqmorsHX2WJKdVTW10scetXHocxx6hPHocxx6hNXV51KmUPYBZ81aPrMbkyQNwVIC/J+Bc5KcneRY4Arg9uUpS5K0mIGnUKrqUJI3AH8FHAO8u6ru63P3rYtvsiqMQ5/j0COMR5/j0COsoj4HfhJTkjRavhNTkhplgEtSo4YS4En2Jtmd5J4kO7uxU5J8OMmD3feTh1HLckry7iSPJbl31ti8faXn7d3HDnwiyXmjq7x/C/R4TZJ93fm8J8nFs9b9etfjA0l+YDRVH50kZyW5K8knk9yX5OpufNWcyyP0uNrO5XFJPpLk412f/6sbPzvJjq6fm7oXXpDkOd3ynm79ulHWf9SqasW/gL3AaXPGfhfY0t3eArx1GLUsc1+vBs4D7l2sL+Bi4INAgAuAHaOufwk9XgO8aZ5tzwU+DjwHOBv4FHDMqHvoo8czgPO6288F/rXrZdWcyyP0uNrOZYCJ7vazgR3dOboZuKIbfyfw893tXwDe2d2+Arhp1D0czdcop1AuBbZ1t7cBl42wloFU1d8B/zVneKG+LgX+tHruBk5KcsZwKh3cAj0u5FJge1V9saoeBvbQ+8iFZ7SqerSqPtrdfhK4H1jLKjqXR+hxIa2ey6qqg93is7uvAl4D3NKNzz2Xh8/xLcCFSTKkcpdsWAFewIeS7OreWg8wWVWPdrc/C0wOqZaVtlBfa4HPzNruEY78A/RM94Zu+uDds6a/mu+xewj9XfSu3FbluZzTI6yyc5nkmCT3AI8BH6b36OFAVR3qNpndy9f67NY/AZw63IoHN6wAf1VVnUfvkwt/McmrZ6+s3uOXVfd6xtXaF/CHwLcBLwUeBa4fbTnLI8kE8H7gl6vq87PXrZZzOU+Pq+5cVtVXquql9N4dfj7wHSMuacUMJcCral/3/THgA/T+UfcfftjZfX9sGLUMwUJ9rZqPHqiq/d0PyVeBd/H1h9bN9pjk2fSC7T1VdWs3vKrO5Xw9rsZzeVhVHQDuAl5Bb5rr8BsXZ/fytT679ScC/znkUge24gGe5IQkzz18G/gfwL303na/sdtsI3DbStcyJAv1dTvwE90rGC4Anpj18Lwpc+Z7f5je+YRej1d0z+yfDZwDfGTY9R2tbs7zRuD+qnrbrFWr5lwu1OMqPJenJzmpu3088P305vvvAi7vNpt7Lg+f48uBv+kebbVhpZ8lBV5A79nsjwP3AW/pxk8F7gQeBP4aOGXUz+gO0Nt76T3s/DK9ebWrFuqL3rPj76A3H7cbmBp1/Uvo8c+6Hj5B7wfgjFnbv6Xr8QHgB0ddf589vore9MgngHu6r4tX07k8Qo+r7Vy+BPhY18+9wG924y+g9wtoD/A+4Dnd+HHd8p5u/QtG3cPRfPlWeklqlO/ElKRGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUf8N43JEr/KqG9gAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEICAYAAABGaK+TAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATTElEQVR4nO3df5Dc9X3f8efLCGrKOcgYeqFIiWig8RBU4+hKSUkzd7hOiHFiMvGQeDCVZkjVTO0ZOlVTy55pY0+dqdwOcTNTTyZq7FiNHR/UhkIgTsxgKUxaxzYyOOKHXSgRCQqRYkdgH6V0RN79475XX0/3Y++0e7sf8XzM3Nx+v/v97ve137193fc+t9/dVBWSpPa8atgBJElrY4FLUqMscElqlAUuSY2ywCWpURa4JDXKAleTktyY5HPDziENU3wduE4HSQq4tKqeHHYWab14BC5JjbLANfKSbE5yR5K/SPLNJP8xyY4kf9Bd/0C36FeTzCT5mSSPJPmJebdxZpJvJHnjEtuoJP80yRNJvp3k3yT5viT/Pcm3ktye5Kxu2ckkzyR5X3ebh5PcOO+2Xpfkt7v1vpzkg3NZpX7aMOwA0nKSnAHcA3weuAl4GZgALplbpqp+pBtCecPcEEqS7wXeCfx2t9hbgGer6qFlNvdjwDZgM/AV4O93t/FN4AvAO4B93bLfDZwPXARcBfxOkger6uvAR4AXumW2AL8HPL3mnSAtwSNwjborgb8J/EJVvVBV/7uqejma/QTwliTf1U3fBPzmCuv8u6r6VlU9CjwCfK6qnqqq54HPAguP3v9VVb1UVb8P3Avc0P3C+WngF6vqf1XVY3yn9KW+ssA16jYDT1fVidWsVFV/Bvw34KeTbAR+HPgkQJJHu6GWmST/YN5qR+ddfnGR6bF508er6oV5008z+4vmAmb/sv3TedfNvyz1jUMoGnV/CnxPkg2rLXFmj3x/jtmf8y9U1RGAqvqBPuR6bZJz5pX49zB71P4XwAlgE/A/uus292F70kk8Ateo+xLwLLAnyTlJXp3k6kWWOwr8rQXz/ivwg8AtwH8eQLYPJDmrO4p/K/Bfqupl4A7g/Un+epLXA/9oANuWLHCNtq4Qf4LZf1r+CfAM8DOLLPp+YF+S55Lc0K37IvAZ4GJmS7Wf/hw4DvwZs0MzP19VX+uuezdwbrfMbwKfAl7q8/YlT+TR6S3Jvwb+dlW9s4+3OQl8oqo29bj8h4Dvrqrt/coggUfgOo0lOQ+4Gdi7ztt9fZK/k1lXdhnuXM8MemWwwHVaSvKPmf0H6Ger6oGVlu+z1zA7ZPMCcBtwK3DXOmfQK4BDKJLUKI/AJalR6/o68PPPP7+2bNmynpv8/7zwwgucc845Q9t+r8zZf61kNWf/tZJ1uZwHDx78RlVdcNIVVbVuX9u2bath2r9//1C33ytz9l8rWc3Zf61kXS4n8GAt0qkOoUhSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqP8SDWdZMvue3tabtfWE+zocdleHd5zXV9vTzqdeQQuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRPX2kWpLDwLeBl4ETVTWR5DzgNmALcBi4oaqODyamJGmh1RyBT1XVFVU10U3vBu6vqkuB+7tpSdI6OZUhlLcB+7rL+4DrTz2OJKlXqaqVF0r+GDgOFPBrVbU3yXNVtbG7PsDxuekF6+4EdgKMj49vm56e7mf+VZmZmWFsbGxo2+/VsHMeOvJ8T8uNnw1HX+zvtrdedG5/b7Az7H3aK3P2XytZl8s5NTV1cN7ox//T0xg48MNVdSTJ3wDuS/K1+VdWVSVZ9DdBVe0F9gJMTEzU5ORkj5vsvwMHDjDM7fdq2Dl37L63p+V2bT3BrYd6/RHqzeEbJ/t6e3OGvU97Zc7+ayXrWnL2NIRSVUe678eAO4ErgaNJLgTovh9b1ZYlSadkxQJPck6S18xdBn4UeAS4G9jeLbYduGtQISVJJ+vl799x4M7ZYW42AL9VVb+b5MvA7UluBp4GbhhcTEnSQisWeFU9BbxhkfnfBN40iFCSpJV5JqYkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDWqv28ldxra0uM78/XTrq0n2LH7Xg7vuW7dty2pHR6BS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqVM8FnuSMJA8luaebvjjJF5M8meS2JGcNLqYkaaHVHIHfAjw+b/pDwIer6hLgOHBzP4NJkpbXU4En2QRcB/x6Nx3gGuDT3SL7gOsHEVCStLhU1coLJZ8G/i3wGuBfADuAP+yOvkmyGfhsVV2+yLo7gZ0A4+Pj26anp/sWfrVmZmYYGxtb1TqHjjw/oDRLGz8bjr4IWy86d923Db3f57mc/TSo+7yWx34YzNl/rWRdLufU1NTBqppYOH/DSjea5K3Asao6mGRytaGqai+wF2BiYqImJ1d9E31z4MABVrv9HbvvHUyYZezaeoJbD23g8I2T675t6P0+z+Xsp0Hd57U89sNgzv5rJetacvby7Lsa+MkkbwFeDXwX8CvAxiQbquoEsAk4srq4kqRTseIYeFW9t6o2VdUW4GeBz1fVjcB+4O3dYtuBuwaWUpJ0klN5Hfh7gH+e5EngdcBH+xNJktSLVQ1gVtUB4EB3+Sngyv5HkiT1wjMxJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGbRh2AGkUbNl979C2fXjPdUPbttq24hF4klcn+VKSryZ5NMkHuvkXJ/likieT3JbkrMHHlSTN6WUI5SXgmqp6A3AFcG2Sq4APAR+uqkuA48DNg4spSVpoxQKvWTPd5JndVwHXAJ/u5u8Drh9IQknSolJVKy+UnAEcBC4BPgL8e+APu6NvkmwGPltVly+y7k5gJ8D4+Pi26enp/qVfpZmZGcbGxla1zqEjzw8ozdLGz4ajL8LWi85d921D7/d5Lmc/Deo+r/TYD+NxnjP/Pq/lZ3QYWskJ7WRdLufU1NTBqppYOL+nf2JW1cvAFUk2AncCr+81VFXtBfYCTExM1OTkZK+r9t2BAwdY7fZ3DOGfW7u2nuDWQxs4fOPkum8ber/Pczn7aVD3eaXHfhiP85z593ktP6PD0EpOaCfrWnKu6mWEVfUcsB/4IWBjkrln7ybgyKq2LEk6Jb28CuWC7sibJGcDbwYeZ7bI394tth24a1AhJUkn6+Xv3wuBfd04+KuA26vqniSPAdNJPgg8BHx0gDklSQusWOBV9UfAGxeZ/xRw5SBCSZJW5qn0ktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RG9fcTadVXW4b4QbuSRp9H4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqNWLPAkm5PsT/JYkkeT3NLNPy/JfUme6L6/dvBxJUlzejkCPwHsqqrLgKuAdyW5DNgN3F9VlwL3d9OSpHWyYoFX1bNV9ZXu8reBx4GLgLcB+7rF9gHXDyqkJOlkqareF062AA8AlwN/UlUbu/kBjs9NL1hnJ7ATYHx8fNv09PSpp16jmZkZxsbGVrXOoSPPDyjN0sbPhqMvrvtmV20QObdedG5/b7Cz0mM/jMd5zvz7vJaf0WFoJSe0k3W5nFNTUweramLh/J4LPMkY8PvAL1XVHUmem1/YSY5X1bLj4BMTE/Xggw/2tL1BOHDgAJOTk6taZxjvyb1r6wluPTT6b9U+iJyH91zX19ubs9JjP8z3Xp9/n9fyMzoMreSEdrIulzPJogXe06tQkpwJfAb4ZFXd0c0+muTC7voLgWNrCS1JWpteXoUS4KPA41X1y/OuuhvY3l3eDtzV/3iSpKX08vfv1cBNwKEkD3fz3gfsAW5PcjPwNHDDYCJKkhazYoFX1R8AWeLqN/U3jiSpV56JKUmNGv2XOugVZVCvBtm19QQ7hvhKE2kQPAKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1ChPpZeGbP7bB6znKf+D+vAMrR+PwCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1qplT6fvxaeV+Mrmk04lH4JLUKAtckhplgUtSoyxwSWrUigWe5GNJjiV5ZN6885Lcl+SJ7vtrBxtTkrRQL0fgHweuXTBvN3B/VV0K3N9NS5LW0YoFXlUPAH+5YPbbgH3d5X3A9X3OJUlaQapq5YWSLcA9VXV5N/1cVW3sLgc4Pje9yLo7gZ0A4+Pj26anp9cU9NCR59e03nzjZ8PRF0/5ZgbOnP3XStb1zLn1onPXvO7MzAxjY2N9TDM4rWRdLufU1NTBqppYOP+UT+Spqkqy5G+BqtoL7AWYmJioycnJNW2nHyfg7Np6glsPjf65S+bsv1ayrmfOwzdOrnndAwcOsNbn8nprJetacq71VShHk1wI0H0/tsbbkSSt0VoL/G5ge3d5O3BXf+JIknrVy8sIPwV8Afj+JM8kuRnYA7w5yRPAP+ymJUnraMXBtqp6xxJXvanPWSRJq+CZmJLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1asOwA0jSetmy+96hbPfwnusGcrsegUtSoyxwSWqUBS5JjXIMXNK6W8+x6F1bT7BjSGPfg3ZKR+BJrk3y9SRPJtndr1CSpJWtucCTnAF8BPhx4DLgHUku61cwSdLyTuUI/Ergyap6qqr+DzANvK0/sSRJK0lVrW3F5O3AtVX1c930TcDfq6p3L1huJ7Czm/x+4Otrj3vKzge+McTt98qc/ddKVnP2XytZl8v5vVV1wcKZA/8nZlXtBfYOeju9SPJgVU0MO8dKzNl/rWQ1Z/+1knUtOU9lCOUIsHne9KZuniRpHZxKgX8ZuDTJxUnOAn4WuLs/sSRJK1nzEEpVnUjybuD3gDOAj1XVo31LNhgjMZTTA3P2XytZzdl/rWRddc41/xNTkjRcnkovSY2ywCWpUadtgSf5WJJjSR6ZN+/9SY4kebj7esswM3aZNifZn+SxJI8muaWbf16S+5I80X1/7YjmHKl9muTVSb6U5Ktdzg908y9O8sXubR9u6/7xPoo5P57kj+ftzyuGmXO+JGckeSjJPd30SO3TOYvkHLl9muRwkkNdnge7eat+zp+2BQ58HLh2kfkfrqoruq/fWedMizkB7Kqqy4CrgHd1b0mwG7i/qi4F7u+mh2mpnDBa+/Ql4JqqegNwBXBtkquADzGb8xLgOHDzEDPC0jkBfmHe/nx4eBFPcgvw+LzpUduncxbmhNHcp1NdnrnXfq/6OX/aFnhVPQD85bBzrKSqnq2qr3SXv83sD95FzL4twb5usX3A9cNJOGuZnCOlZs10k2d2XwVcA3y6mz8K+3OpnCMpySbgOuDXu+kwYvsUTs7ZmFU/50/bAl/Gu5P8UTfEMtRhiYWSbAHeCHwRGK+qZ7ur/hwYH1KskyzICSO2T7s/oR8GjgH3Af8TeK6qTnSLPMMI/PJZmLOq5vbnL3X788NJ/toQI873H4B/CfxVN/06RnCfcnLOOaO2Twv4XJKD3duNwBqe86+0Av9V4PuY/ZP1WeDW4cb5jiRjwGeAf1ZV35p/Xc2+1nMkjs4WyTly+7SqXq6qK5g9O/hK4PVDjrSohTmTXA68l9m8fxc4D3jPECMCkOStwLGqOjjsLMtZJufI7VPgh6vqB5l9N9d3JfmR+Vf2+px/RRV4VR3tnjR/BfwnZp/cQ5fkTGZL8ZNVdUc3+2iSC7vrL2T2KG2oFss5qvsUoKqeA/YDPwRsTDJ34tpIve3DvJzXdkNVVVUvAb/BaOzPq4GfTHKY2XcdvQb4FUZvn56UM8knRnGfVtWR7vsx4E5mM636Of+KKvC5ndP5KeCRpZZdL91Y4keBx6vql+dddTewvbu8HbhrvbPNt1TOUdunSS5IsrG7fDbwZmbH6/cDb+8WG4X9uVjOr817AofZMdCh/4xW1XuralNVbWH2LTM+X1U3MmL7dImc7xy1fZrknCSvmbsM/GiXadXP+dP2I9WSfAqYBM5P8gzwi8Bk9xKiAg4D/2RoAb/jauAm4FA3HgrwPmAPcHuSm4GngRuGlG/OUjnfMWL79EJgX2Y/cORVwO1VdU+Sx4DpJB8EHmL2l9EwLZXz80kuAAI8DPz8MEOu4D2M1j5dyidHbJ+OA3fO/j5hA/BbVfW7Sb7MKp/znkovSY16RQ2hSNLpxAKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5Jjfq/ecHfjeRocv0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This 1D visualization of each numeric feature might inform your normalization\n",
    "# decisions.\n",
    "for feature_name in numeric_feature_names:\n",
    "  car_data.hist(column=feature_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oiEpDZKSj8pN"
   },
   "source": [
    "###Train your model with numeric features + normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "c30Y6IiR8iVn"
   },
   "outputs": [],
   "source": [
    "## Your code goes here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "RxYJy71zaZsy",
    "outputId": "b24cef59-8e05-4995-aea7-d59c0e59ffc6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['symboling', 'wheel-base', 'length', 'width', 'height', 'weight', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']\n",
      "model_feature_columns [NumericColumn(key='symboling', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782ac20>), NumericColumn(key='wheel-base', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782acb0>), NumericColumn(key='length', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782aa70>), NumericColumn(key='width', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782ab00>), NumericColumn(key='height', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782a950>), NumericColumn(key='weight', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782a680>), NumericColumn(key='engine-size', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782ab90>), NumericColumn(key='bore', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782ad40>), NumericColumn(key='stroke', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782add0>), NumericColumn(key='compression-ratio', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782ae60>), NumericColumn(key='horsepower', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782aef0>), NumericColumn(key='peak-rpm', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff14782af80>), NumericColumn(key='city-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff1465cb050>), NumericColumn(key='highway-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff1465cb0e0>), NumericColumn(key='price', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function <listcomp>.<lambda> at 0x7ff1465cb170>)]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpqg7qpcc3\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpqg7qpcc3', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 0...\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 0...\n",
      "INFO:tensorflow:loss = 3500610600.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 309.465\n",
      "INFO:tensorflow:loss = 2488564700.0, step = 101 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.938\n",
      "INFO:tensorflow:loss = 2863070700.0, step = 201 (0.300 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.446\n",
      "INFO:tensorflow:loss = 4909712400.0, step = 301 (0.275 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.371\n",
      "INFO:tensorflow:loss = 2758379000.0, step = 401 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.128\n",
      "INFO:tensorflow:loss = 5566012400.0, step = 501 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.876\n",
      "INFO:tensorflow:loss = 3803308800.0, step = 601 (0.311 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.269\n",
      "INFO:tensorflow:loss = 3874384000.0, step = 701 (0.269 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.369\n",
      "INFO:tensorflow:loss = 2385392000.0, step = 801 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.401\n",
      "INFO:tensorflow:loss = 2670722000.0, step = 901 (0.284 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 1000...\n",
      "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 1000...\n",
      "INFO:tensorflow:Loss for final step: 4579044000.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:35:38\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-1000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.32308s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:35:38\n",
      "INFO:tensorflow:Saving dict for global step 1000: average_loss = 223701860.0, global_step = 1000, label/mean = 12949.43, loss = 3527606300.0, prediction/mean = 336.39832\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 1000: /tmp/tmpqg7qpcc3/model.ckpt-1000\n",
      "scores {'average_loss': 223701860.0, 'label/mean': 12949.43, 'loss': 3527606300.0, 'prediction/mean': 336.39832, 'global_step': 1000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-1000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 1000...\n",
      "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 1000...\n",
      "INFO:tensorflow:loss = 3055886600.0, step = 1001\n",
      "INFO:tensorflow:global_step/sec: 310.709\n",
      "INFO:tensorflow:loss = 2462662700.0, step = 1101 (0.333 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.631\n",
      "INFO:tensorflow:loss = 2484154600.0, step = 1201 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.259\n",
      "INFO:tensorflow:loss = 1805766400.0, step = 1301 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 310.427\n",
      "INFO:tensorflow:loss = 3749088500.0, step = 1401 (0.321 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.015\n",
      "INFO:tensorflow:loss = 3514328800.0, step = 1501 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.82\n",
      "INFO:tensorflow:loss = 3253601300.0, step = 1601 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 356.664\n",
      "INFO:tensorflow:loss = 3036561700.0, step = 1701 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 381.511\n",
      "INFO:tensorflow:loss = 2380411400.0, step = 1801 (0.261 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.662\n",
      "INFO:tensorflow:loss = 3141704200.0, step = 1901 (0.283 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:Loss for final step: 3468934700.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:35:43\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.32783s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:35:43\n",
      "INFO:tensorflow:Saving dict for global step 2000: average_loss = 215307200.0, global_step = 2000, label/mean = 12949.43, loss = 3395229000.0, prediction/mean = 660.96436\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 2000: /tmp/tmpqg7qpcc3/model.ckpt-2000\n",
      "scores {'average_loss': 215307200.0, 'label/mean': 12949.43, 'loss': 3395229000.0, 'prediction/mean': 660.96436, 'global_step': 2000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:loss = 1747983400.0, step = 2001\n",
      "INFO:tensorflow:global_step/sec: 337.127\n",
      "INFO:tensorflow:loss = 2806413800.0, step = 2101 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.237\n",
      "INFO:tensorflow:loss = 3911557600.0, step = 2201 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 372.076\n",
      "INFO:tensorflow:loss = 2481053700.0, step = 2301 (0.275 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.087\n",
      "INFO:tensorflow:loss = 2886675000.0, step = 2401 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.135\n",
      "INFO:tensorflow:loss = 4078849000.0, step = 2501 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.996\n",
      "INFO:tensorflow:loss = 4845896700.0, step = 2601 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 352.958\n",
      "INFO:tensorflow:loss = 3784925200.0, step = 2701 (0.274 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.871\n",
      "INFO:tensorflow:loss = 5400613000.0, step = 2801 (0.266 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.981\n",
      "INFO:tensorflow:loss = 2643277600.0, step = 2901 (0.298 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 3000...\n",
      "INFO:tensorflow:Saving checkpoints for 3000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 3000...\n",
      "INFO:tensorflow:Loss for final step: 2238327000.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:35:47\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-3000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.29087s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:35:48\n",
      "INFO:tensorflow:Saving dict for global step 3000: average_loss = 207264900.0, global_step = 3000, label/mean = 12949.43, loss = 3268407800.0, prediction/mean = 979.92706\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 3000: /tmp/tmpqg7qpcc3/model.ckpt-3000\n",
      "scores {'average_loss': 207264900.0, 'label/mean': 12949.43, 'loss': 3268407800.0, 'prediction/mean': 979.92706, 'global_step': 3000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-3000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 3000...\n",
      "INFO:tensorflow:Saving checkpoints for 3000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 3000...\n",
      "INFO:tensorflow:loss = 2151884300.0, step = 3001\n",
      "INFO:tensorflow:global_step/sec: 321.109\n",
      "INFO:tensorflow:loss = 4991067000.0, step = 3101 (0.320 sec)\n",
      "INFO:tensorflow:global_step/sec: 325.18\n",
      "INFO:tensorflow:loss = 3031368000.0, step = 3201 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 356.81\n",
      "INFO:tensorflow:loss = 2004292900.0, step = 3301 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 375.696\n",
      "INFO:tensorflow:loss = 2313208000.0, step = 3401 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 363.575\n",
      "INFO:tensorflow:loss = 3425387300.0, step = 3501 (0.272 sec)\n",
      "INFO:tensorflow:global_step/sec: 366.837\n",
      "INFO:tensorflow:loss = 3566827300.0, step = 3601 (0.270 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.204\n",
      "INFO:tensorflow:loss = 2793246500.0, step = 3701 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.827\n",
      "INFO:tensorflow:loss = 2631702500.0, step = 3801 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 335.258\n",
      "INFO:tensorflow:loss = 3170855000.0, step = 3901 (0.299 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:Loss for final step: 5008844300.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:35:52\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.33112s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:35:52\n",
      "INFO:tensorflow:Saving dict for global step 4000: average_loss = 199555340.0, global_step = 4000, label/mean = 12949.43, loss = 3146834200.0, prediction/mean = 1293.6096\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4000: /tmp/tmpqg7qpcc3/model.ckpt-4000\n",
      "scores {'average_loss': 199555340.0, 'label/mean': 12949.43, 'loss': 3146834200.0, 'prediction/mean': 1293.6096, 'global_step': 4000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:loss = 3704844300.0, step = 4001\n",
      "INFO:tensorflow:global_step/sec: 354.126\n",
      "INFO:tensorflow:loss = 3021069000.0, step = 4101 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 366.261\n",
      "INFO:tensorflow:loss = 2159029800.0, step = 4201 (0.269 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.062\n",
      "INFO:tensorflow:loss = 2970862000.0, step = 4301 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.173\n",
      "INFO:tensorflow:loss = 1545274600.0, step = 4401 (0.301 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.83\n",
      "INFO:tensorflow:loss = 4085851600.0, step = 4501 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 316.46\n",
      "INFO:tensorflow:loss = 2094251300.0, step = 4601 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.253\n",
      "INFO:tensorflow:loss = 1975427800.0, step = 4701 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.69\n",
      "INFO:tensorflow:loss = 1680712200.0, step = 4801 (0.276 sec)\n",
      "INFO:tensorflow:global_step/sec: 362.842\n",
      "INFO:tensorflow:loss = 3181673700.0, step = 4901 (0.273 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 5000...\n",
      "INFO:tensorflow:Saving checkpoints for 5000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 5000...\n",
      "INFO:tensorflow:Loss for final step: 3864659700.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:35:57\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-5000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.31474s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:35:58\n",
      "INFO:tensorflow:Saving dict for global step 5000: average_loss = 192148260.0, global_step = 5000, label/mean = 12949.43, loss = 3030030000.0, prediction/mean = 1602.825\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 5000: /tmp/tmpqg7qpcc3/model.ckpt-5000\n",
      "scores {'average_loss': 192148260.0, 'label/mean': 12949.43, 'loss': 3030030000.0, 'prediction/mean': 1602.825, 'global_step': 5000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-5000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 5000...\n",
      "INFO:tensorflow:Saving checkpoints for 5000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 5000...\n",
      "INFO:tensorflow:loss = 2853099000.0, step = 5001\n",
      "INFO:tensorflow:global_step/sec: 306.309\n",
      "INFO:tensorflow:loss = 2947154000.0, step = 5101 (0.341 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.059\n",
      "INFO:tensorflow:loss = 4467705000.0, step = 5201 (0.417 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.488\n",
      "INFO:tensorflow:loss = 3666477300.0, step = 5301 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 356.108\n",
      "INFO:tensorflow:loss = 2303700200.0, step = 5401 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 337.188\n",
      "INFO:tensorflow:loss = 3576532000.0, step = 5501 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.799\n",
      "INFO:tensorflow:loss = 2621152000.0, step = 5601 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.644\n",
      "INFO:tensorflow:loss = 5079609300.0, step = 5701 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.211\n",
      "INFO:tensorflow:loss = 1917600800.0, step = 5801 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.794\n",
      "INFO:tensorflow:loss = 3663408600.0, step = 5901 (0.306 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:Loss for final step: 4355434500.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:36:02\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.33747s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:36:03\n",
      "INFO:tensorflow:Saving dict for global step 6000: average_loss = 185037540.0, global_step = 6000, label/mean = 12949.43, loss = 2917899800.0, prediction/mean = 1907.4766\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 6000: /tmp/tmpqg7qpcc3/model.ckpt-6000\n",
      "scores {'average_loss': 185037540.0, 'label/mean': 12949.43, 'loss': 2917899800.0, 'prediction/mean': 1907.4766, 'global_step': 6000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:loss = 2436769800.0, step = 6001\n",
      "INFO:tensorflow:global_step/sec: 315.398\n",
      "INFO:tensorflow:loss = 1667735200.0, step = 6101 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.187\n",
      "INFO:tensorflow:loss = 1620514300.0, step = 6201 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.372\n",
      "INFO:tensorflow:loss = 3525981200.0, step = 6301 (0.305 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.381\n",
      "INFO:tensorflow:loss = 1542436400.0, step = 6401 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 365.058\n",
      "INFO:tensorflow:loss = 3223586300.0, step = 6501 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 364.704\n",
      "INFO:tensorflow:loss = 3963990000.0, step = 6601 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.741\n",
      "INFO:tensorflow:loss = 2220753400.0, step = 6701 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.929\n",
      "INFO:tensorflow:loss = 3634040300.0, step = 6801 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.332\n",
      "INFO:tensorflow:loss = 2083996300.0, step = 6901 (0.294 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 7000...\n",
      "INFO:tensorflow:Saving checkpoints for 7000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 7000...\n",
      "INFO:tensorflow:Loss for final step: 2781275100.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:36:07\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-7000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.35012s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:36:08\n",
      "INFO:tensorflow:Saving dict for global step 7000: average_loss = 178220350.0, global_step = 7000, label/mean = 12949.43, loss = 2810398000.0, prediction/mean = 2207.3252\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 7000: /tmp/tmpqg7qpcc3/model.ckpt-7000\n",
      "scores {'average_loss': 178220350.0, 'label/mean': 12949.43, 'loss': 2810398000.0, 'prediction/mean': 2207.3252, 'global_step': 7000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-7000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 7000...\n",
      "INFO:tensorflow:Saving checkpoints for 7000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 7000...\n",
      "INFO:tensorflow:loss = 2503157200.0, step = 7001\n",
      "INFO:tensorflow:global_step/sec: 312.561\n",
      "INFO:tensorflow:loss = 1555913100.0, step = 7101 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 352.384\n",
      "INFO:tensorflow:loss = 1805142300.0, step = 7201 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.129\n",
      "INFO:tensorflow:loss = 2239776800.0, step = 7301 (0.318 sec)\n",
      "INFO:tensorflow:global_step/sec: 320.667\n",
      "INFO:tensorflow:loss = 5299168000.0, step = 7401 (0.328 sec)\n",
      "INFO:tensorflow:global_step/sec: 311.955\n",
      "INFO:tensorflow:loss = 3002235100.0, step = 7501 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.981\n",
      "INFO:tensorflow:loss = 2218691600.0, step = 7601 (0.274 sec)\n",
      "INFO:tensorflow:global_step/sec: 317.226\n",
      "INFO:tensorflow:loss = 3700250400.0, step = 7701 (0.325 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.98\n",
      "INFO:tensorflow:loss = 3230358500.0, step = 7801 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 369.977\n",
      "INFO:tensorflow:loss = 7211950600.0, step = 7901 (0.274 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:Loss for final step: 2890008000.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:36:12\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.31775s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:36:13\n",
      "INFO:tensorflow:Saving dict for global step 8000: average_loss = 171688000.0, global_step = 8000, label/mean = 12949.43, loss = 2707387600.0, prediction/mean = 2502.3567\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 8000: /tmp/tmpqg7qpcc3/model.ckpt-8000\n",
      "scores {'average_loss': 171688000.0, 'label/mean': 12949.43, 'loss': 2707387600.0, 'prediction/mean': 2502.3567, 'global_step': 8000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:loss = 3046259000.0, step = 8001\n",
      "INFO:tensorflow:global_step/sec: 311.602\n",
      "INFO:tensorflow:loss = 3360372000.0, step = 8101 (0.331 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.065\n",
      "INFO:tensorflow:loss = 2569096200.0, step = 8201 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.687\n",
      "INFO:tensorflow:loss = 922895900.0, step = 8301 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 320.998\n",
      "INFO:tensorflow:loss = 1773814500.0, step = 8401 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.508\n",
      "INFO:tensorflow:loss = 3527899100.0, step = 8501 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 359.232\n",
      "INFO:tensorflow:loss = 2695065600.0, step = 8601 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.38\n",
      "INFO:tensorflow:loss = 1186495700.0, step = 8701 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.598\n",
      "INFO:tensorflow:loss = 1473562400.0, step = 8801 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.135\n",
      "INFO:tensorflow:loss = 1356014300.0, step = 8901 (0.301 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 9000...\n",
      "INFO:tensorflow:Saving checkpoints for 9000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 9000...\n",
      "INFO:tensorflow:Loss for final step: 3094743600.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:36:17\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-9000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.30425s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:36:17\n",
      "INFO:tensorflow:Saving dict for global step 9000: average_loss = 165440910.0, global_step = 9000, label/mean = 12949.43, loss = 2608876000.0, prediction/mean = 2792.1633\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 9000: /tmp/tmpqg7qpcc3/model.ckpt-9000\n",
      "scores {'average_loss': 165440910.0, 'label/mean': 12949.43, 'loss': 2608876000.0, 'prediction/mean': 2792.1633, 'global_step': 9000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-9000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 9000...\n",
      "INFO:tensorflow:Saving checkpoints for 9000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 9000...\n",
      "INFO:tensorflow:loss = 3843777300.0, step = 9001\n",
      "INFO:tensorflow:global_step/sec: 303.084\n",
      "INFO:tensorflow:loss = 907709440.0, step = 9101 (0.331 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.624\n",
      "INFO:tensorflow:loss = 4051435300.0, step = 9201 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.694\n",
      "INFO:tensorflow:loss = 2800728300.0, step = 9301 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.997\n",
      "INFO:tensorflow:loss = 2275103500.0, step = 9401 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 325.352\n",
      "INFO:tensorflow:loss = 2914951400.0, step = 9501 (0.305 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.317\n",
      "INFO:tensorflow:loss = 2702594000.0, step = 9601 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 360.616\n",
      "INFO:tensorflow:loss = 2783374600.0, step = 9701 (0.272 sec)\n",
      "INFO:tensorflow:global_step/sec: 339.387\n",
      "INFO:tensorflow:loss = 2410076700.0, step = 9801 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 331.881\n",
      "INFO:tensorflow:loss = 1925483000.0, step = 9901 (0.302 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 10000...\n",
      "INFO:tensorflow:Saving checkpoints for 10000 into /tmp/tmpqg7qpcc3/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 10000...\n",
      "INFO:tensorflow:Loss for final step: 2187959300.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:36:22\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.31938s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:36:22\n",
      "INFO:tensorflow:Saving dict for global step 10000: average_loss = 159447700.0, global_step = 10000, label/mean = 12949.43, loss = 2514367500.0, prediction/mean = 3077.7976\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 10000: /tmp/tmpqg7qpcc3/model.ckpt-10000\n",
      "scores {'average_loss': 159447700.0, 'label/mean': 12949.43, 'loss': 2514367500.0, 'prediction/mean': 3077.7976, 'global_step': 10000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpqg7qpcc3/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 972x1620 with 15 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#@title Possible solution\n",
    "# This does Z-score normalization since the distributions for most features looked\n",
    "# roughly normally distributed.\n",
    "\n",
    "# Z-score normalization subtracts the mean and divides by the standard deviation,\n",
    "# to give a roughly standard normal distribution (mean = 0, std = 1) under a\n",
    "# normal distribution assumption. Epsilon prevents divide by zero.\n",
    "\n",
    "# With normalization, are you able to get the model working with\n",
    "# GradientDescentOptimizer? Z-score normalization doesn't seem to be able to get\n",
    "# SGD working. Maybe a different type of normalization would?\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "print(numeric_feature_names)\n",
    "x_df = car_data[numeric_feature_names]\n",
    "y_series = car_data['price']\n",
    "\n",
    "train_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    num_epochs=None,\n",
    "    shuffle=True)\n",
    "\n",
    "eval_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "# Epsilon prevents divide by zero.\n",
    "epsilon = 0.000001\n",
    "model_feature_columns = [\n",
    "    tf.feature_column.numeric_column(feature_name,\n",
    "                                     normalizer_fn=lambda val: (val - x_df.[feature_name]) / (epsilon + x_df.std()[feature_name]))\n",
    "    for feature_name in numeric_feature_names\n",
    "]\n",
    "print('model_feature_columns', model_feature_columns)\n",
    "\n",
    "est = tf.estimator.DNNRegressor(\n",
    "    feature_columns=model_feature_columns,\n",
    "    hidden_units=[64],\n",
    "    optimizer=tf.train.AdagradOptimizer(learning_rate=0.01),\n",
    "  )\n",
    "\n",
    "# TRAIN\n",
    "num_print_statements = 10\n",
    "num_training_steps = 10000\n",
    "for _ in range(num_print_statements):\n",
    "  est.train(train_input_fn, steps=num_training_steps // num_print_statements)\n",
    "  scores = est.evaluate(eval_input_fn)\n",
    "  \n",
    "  # The `scores` dictionary has several metrics automatically generated by the \n",
    "  # canned Estimator.\n",
    "  # `average_loss` is the average loss for an individual example.\n",
    "  # `loss` is the summed loss for the batch.\n",
    "  # In addition to these scalar losses, you may find the visualization functions\n",
    "  # in the next cell helpful for debugging model quality.\n",
    "  print('scores', scores)\n",
    "\n",
    "scatter_plot_inference_grid(est, x_df, numeric_feature_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fruh0Qj5_Bos"
   },
   "source": [
    "## Task 3: Make your best model using only categorical features\n",
    "\n",
    "- Look at the possible feature columns for categorical features. They begin with `categorical_column_with_` in go/tf-ops.\n",
    "- You may find `dataframe[categorical_feature_names].unique()` helpful.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "cellView": "code",
    "id": "-udhHnNS2WvN"
   },
   "outputs": [],
   "source": [
    "## Your code goes here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EftIzPAI9RJj",
    "outputId": "bd69eb32-4303-4288-f23a-5bfb3d926d2d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model_feature_columns [IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='make', vocabulary_list=('volkswagen', 'toyota', 'peugot', 'mazda', 'plymouth', 'honda', 'volvo', 'isuzu', 'jaguar', 'chevrolet', 'subaru', 'mitsubishi', 'nissan', 'dodge', 'bmw', 'audi', 'mercedes-benz', 'porsche', 'alfa-romero', 'saab', 'renault', 'mercury'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='fuel-type', vocabulary_list=('gas', 'diesel'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='aspiration', vocabulary_list=('std', 'turbo'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='num-doors', vocabulary_list=('two', 'four', '?'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='body-style', vocabulary_list=('sedan', 'wagon', 'hatchback', 'hardtop', 'convertible'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='drive-wheels', vocabulary_list=('fwd', '4wd', 'rwd'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='engine-location', vocabulary_list=('front', 'rear'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='engine-type', vocabulary_list=('ohc', 'l', 'dohc', 'ohcv', 'ohcf', 'rotor', 'dohcv'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='num-cylinders', vocabulary_list=('four', 'six', 'twelve', 'two', 'five', 'eight', 'three'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='fuel-system', vocabulary_list=('mpfi', '2bbl', 'idi', '1bbl', 'spdi', 'mfi', '4bbl', 'spfi'), dtype=tf.string, default_value=-1, num_oov_buckets=0))]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpbahai1ao\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpbahai1ao', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 0...\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 0...\n",
      "INFO:tensorflow:loss = 3580257300.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 317.111\n",
      "INFO:tensorflow:loss = 7291930600.0, step = 101 (0.318 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.445\n",
      "INFO:tensorflow:loss = 3319083500.0, step = 201 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 356.442\n",
      "INFO:tensorflow:loss = 4364571600.0, step = 301 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.324\n",
      "INFO:tensorflow:loss = 2558110200.0, step = 401 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.339\n",
      "INFO:tensorflow:loss = 2850628000.0, step = 501 (0.310 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.497\n",
      "INFO:tensorflow:loss = 3222752000.0, step = 601 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.786\n",
      "INFO:tensorflow:loss = 3007572700.0, step = 701 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.6\n",
      "INFO:tensorflow:loss = 2369898500.0, step = 801 (0.294 sec)\n",
      "INFO:tensorflow:global_step/sec: 371.827\n",
      "INFO:tensorflow:loss = 3161995300.0, step = 901 (0.268 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.196\n",
      "INFO:tensorflow:loss = 1637125200.0, step = 1001 (0.322 sec)\n",
      "INFO:tensorflow:global_step/sec: 301.21\n",
      "INFO:tensorflow:loss = 1612212600.0, step = 1101 (0.326 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.49\n",
      "INFO:tensorflow:loss = 4108576800.0, step = 1201 (0.275 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.517\n",
      "INFO:tensorflow:loss = 1948889000.0, step = 1301 (0.270 sec)\n",
      "INFO:tensorflow:global_step/sec: 205.085\n",
      "INFO:tensorflow:loss = 1450875100.0, step = 1401 (0.487 sec)\n",
      "INFO:tensorflow:global_step/sec: 361.628\n",
      "INFO:tensorflow:loss = 2732127200.0, step = 1501 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.575\n",
      "INFO:tensorflow:loss = 1046940800.0, step = 1601 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.262\n",
      "INFO:tensorflow:loss = 3370336000.0, step = 1701 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.394\n",
      "INFO:tensorflow:loss = 739834560.0, step = 1801 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.219\n",
      "INFO:tensorflow:loss = 2146092500.0, step = 1901 (0.294 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:Loss for final step: 3019214800.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:57:27\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.32934s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:57:27\n",
      "INFO:tensorflow:Saving dict for global step 2000: average_loss = 85417864.0, global_step = 2000, label/mean = 12949.43, loss = 1346974000.0, prediction/mean = 8408.446\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 2000: /tmp/tmpbahai1ao/model.ckpt-2000\n",
      "scores {'average_loss': 85417864.0, 'label/mean': 12949.43, 'loss': 1346974000.0, 'prediction/mean': 8408.446, 'global_step': 2000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:loss = 1147427300.0, step = 2001\n",
      "INFO:tensorflow:global_step/sec: 326.099\n",
      "INFO:tensorflow:loss = 1541390300.0, step = 2101 (0.312 sec)\n",
      "INFO:tensorflow:global_step/sec: 365.074\n",
      "INFO:tensorflow:loss = 2625797000.0, step = 2201 (0.275 sec)\n",
      "INFO:tensorflow:global_step/sec: 376.103\n",
      "INFO:tensorflow:loss = 1862388600.0, step = 2301 (0.262 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.062\n",
      "INFO:tensorflow:loss = 702531840.0, step = 2401 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.514\n",
      "INFO:tensorflow:loss = 1380363000.0, step = 2501 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 370.316\n",
      "INFO:tensorflow:loss = 1853340200.0, step = 2601 (0.270 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.668\n",
      "INFO:tensorflow:loss = 1528718500.0, step = 2701 (0.307 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.045\n",
      "INFO:tensorflow:loss = 1062221950.0, step = 2801 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.195\n",
      "INFO:tensorflow:loss = 1128353200.0, step = 2901 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 341.605\n",
      "INFO:tensorflow:loss = 162004540.0, step = 3001 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 298.554\n",
      "INFO:tensorflow:loss = 1226698100.0, step = 3101 (0.332 sec)\n",
      "INFO:tensorflow:global_step/sec: 352.362\n",
      "INFO:tensorflow:loss = 671991100.0, step = 3201 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.075\n",
      "INFO:tensorflow:loss = 399923070.0, step = 3301 (0.261 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.115\n",
      "INFO:tensorflow:loss = 1015816900.0, step = 3401 (0.279 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.814\n",
      "INFO:tensorflow:loss = 178402380.0, step = 3501 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.945\n",
      "INFO:tensorflow:loss = 758534100.0, step = 3601 (0.311 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.962\n",
      "INFO:tensorflow:loss = 1838241000.0, step = 3701 (0.277 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.353\n",
      "INFO:tensorflow:loss = 557107140.0, step = 3801 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.161\n",
      "INFO:tensorflow:loss = 1355725300.0, step = 3901 (0.283 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:Loss for final step: 2311555600.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:57:35\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.32071s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:57:35\n",
      "INFO:tensorflow:Saving dict for global step 4000: average_loss = 57806284.0, global_step = 4000, label/mean = 12949.43, loss = 911560640.0, prediction/mean = 11362.555\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4000: /tmp/tmpbahai1ao/model.ckpt-4000\n",
      "scores {'average_loss': 57806284.0, 'label/mean': 12949.43, 'loss': 911560640.0, 'prediction/mean': 11362.555, 'global_step': 4000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:loss = 1157167900.0, step = 4001\n",
      "INFO:tensorflow:global_step/sec: 304.754\n",
      "INFO:tensorflow:loss = 952108800.0, step = 4101 (0.336 sec)\n",
      "INFO:tensorflow:global_step/sec: 347.674\n",
      "INFO:tensorflow:loss = 1126451000.0, step = 4201 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.091\n",
      "INFO:tensorflow:loss = 1239102000.0, step = 4301 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.565\n",
      "INFO:tensorflow:loss = 1106063100.0, step = 4401 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 194.689\n",
      "INFO:tensorflow:loss = 1476353500.0, step = 4501 (0.511 sec)\n",
      "INFO:tensorflow:global_step/sec: 360.239\n",
      "INFO:tensorflow:loss = 763288100.0, step = 4601 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.629\n",
      "INFO:tensorflow:loss = 869915650.0, step = 4701 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.993\n",
      "INFO:tensorflow:loss = 1644183900.0, step = 4801 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 351.995\n",
      "INFO:tensorflow:loss = 1465610500.0, step = 4901 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 328.185\n",
      "INFO:tensorflow:loss = 247984420.0, step = 5001 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 357.19\n",
      "INFO:tensorflow:loss = 1531204900.0, step = 5101 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 365.912\n",
      "INFO:tensorflow:loss = 271225180.0, step = 5201 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 363.394\n",
      "INFO:tensorflow:loss = 609453300.0, step = 5301 (0.272 sec)\n",
      "INFO:tensorflow:global_step/sec: 350.542\n",
      "INFO:tensorflow:loss = 873042400.0, step = 5401 (0.288 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.636\n",
      "INFO:tensorflow:loss = 119367740.0, step = 5501 (0.271 sec)\n",
      "INFO:tensorflow:global_step/sec: 353.506\n",
      "INFO:tensorflow:loss = 251706370.0, step = 5601 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.889\n",
      "INFO:tensorflow:loss = 322805380.0, step = 5701 (0.295 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.77\n",
      "INFO:tensorflow:loss = 1601029000.0, step = 5801 (0.285 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.788\n",
      "INFO:tensorflow:loss = 588966660.0, step = 5901 (0.275 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:Loss for final step: 696710000.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:57:43\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.33506s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:57:43\n",
      "INFO:tensorflow:Saving dict for global step 6000: average_loss = 46052532.0, global_step = 6000, label/mean = 12949.43, loss = 726213000.0, prediction/mean = 12179.225\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 6000: /tmp/tmpbahai1ao/model.ckpt-6000\n",
      "scores {'average_loss': 46052532.0, 'label/mean': 12949.43, 'loss': 726213000.0, 'prediction/mean': 12179.225, 'global_step': 6000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:loss = 2214421800.0, step = 6001\n",
      "INFO:tensorflow:global_step/sec: 330.689\n",
      "INFO:tensorflow:loss = 192981540.0, step = 6101 (0.312 sec)\n",
      "INFO:tensorflow:global_step/sec: 329.499\n",
      "INFO:tensorflow:loss = 595362300.0, step = 6201 (0.307 sec)\n",
      "INFO:tensorflow:global_step/sec: 338.431\n",
      "INFO:tensorflow:loss = 127910860.0, step = 6301 (0.296 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.209\n",
      "INFO:tensorflow:loss = 558822300.0, step = 6401 (0.283 sec)\n",
      "INFO:tensorflow:global_step/sec: 349.878\n",
      "INFO:tensorflow:loss = 311191600.0, step = 6501 (0.284 sec)\n",
      "INFO:tensorflow:global_step/sec: 359.088\n",
      "INFO:tensorflow:loss = 1316710900.0, step = 6601 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 345.557\n",
      "INFO:tensorflow:loss = 309876800.0, step = 6701 (0.291 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.218\n",
      "INFO:tensorflow:loss = 715826200.0, step = 6801 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 359.283\n",
      "INFO:tensorflow:loss = 279815680.0, step = 6901 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 342.917\n",
      "INFO:tensorflow:loss = 566656500.0, step = 7001 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 314.28\n",
      "INFO:tensorflow:loss = 1017351000.0, step = 7101 (0.314 sec)\n",
      "INFO:tensorflow:global_step/sec: 340.63\n",
      "INFO:tensorflow:loss = 1240930800.0, step = 7201 (0.292 sec)\n",
      "INFO:tensorflow:global_step/sec: 330.714\n",
      "INFO:tensorflow:loss = 105857490.0, step = 7301 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.67\n",
      "INFO:tensorflow:loss = 696604300.0, step = 7401 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 332.671\n",
      "INFO:tensorflow:loss = 1031961000.0, step = 7501 (0.302 sec)\n",
      "INFO:tensorflow:global_step/sec: 341.18\n",
      "INFO:tensorflow:loss = 1210474000.0, step = 7601 (0.293 sec)\n",
      "INFO:tensorflow:global_step/sec: 343.349\n",
      "INFO:tensorflow:loss = 323838460.0, step = 7701 (0.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 364.657\n",
      "INFO:tensorflow:loss = 779336100.0, step = 7801 (0.277 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.216\n",
      "INFO:tensorflow:loss = 590174900.0, step = 7901 (0.272 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:Loss for final step: 1201529300.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:57:51\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.35086s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:57:51\n",
      "INFO:tensorflow:Saving dict for global step 8000: average_loss = 38395644.0, global_step = 8000, label/mean = 12949.43, loss = 605469760.0, prediction/mean = 12465.072\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 8000: /tmp/tmpbahai1ao/model.ckpt-8000\n",
      "scores {'average_loss': 38395644.0, 'label/mean': 12949.43, 'loss': 605469760.0, 'prediction/mean': 12465.072, 'global_step': 8000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:loss = 744990400.0, step = 8001\n",
      "INFO:tensorflow:global_step/sec: 321.675\n",
      "INFO:tensorflow:loss = 105089280.0, step = 8101 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 305.664\n",
      "INFO:tensorflow:loss = 232646530.0, step = 8201 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 354.838\n",
      "INFO:tensorflow:loss = 781232060.0, step = 8301 (0.287 sec)\n",
      "INFO:tensorflow:global_step/sec: 348.303\n",
      "INFO:tensorflow:loss = 112527944.0, step = 8401 (0.282 sec)\n",
      "INFO:tensorflow:global_step/sec: 364.405\n",
      "INFO:tensorflow:loss = 925888400.0, step = 8501 (0.278 sec)\n",
      "INFO:tensorflow:global_step/sec: 324.686\n",
      "INFO:tensorflow:loss = 433007300.0, step = 8601 (0.307 sec)\n",
      "INFO:tensorflow:global_step/sec: 365.295\n",
      "INFO:tensorflow:loss = 1161074700.0, step = 8701 (0.272 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.715\n",
      "INFO:tensorflow:loss = 722374200.0, step = 8801 (0.287 sec)\n",
      "INFO:tensorflow:global_step/sec: 313.87\n",
      "INFO:tensorflow:loss = 359195300.0, step = 8901 (0.321 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.535\n",
      "INFO:tensorflow:loss = 496515100.0, step = 9001 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 346.464\n",
      "INFO:tensorflow:loss = 137483740.0, step = 9101 (0.297 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.872\n",
      "INFO:tensorflow:loss = 502530750.0, step = 9201 (0.287 sec)\n",
      "INFO:tensorflow:global_step/sec: 362.716\n",
      "INFO:tensorflow:loss = 1275719200.0, step = 9301 (0.270 sec)\n",
      "INFO:tensorflow:global_step/sec: 366.929\n",
      "INFO:tensorflow:loss = 627050050.0, step = 9401 (0.273 sec)\n",
      "INFO:tensorflow:global_step/sec: 383.333\n",
      "INFO:tensorflow:loss = 325539700.0, step = 9501 (0.261 sec)\n",
      "INFO:tensorflow:global_step/sec: 358.454\n",
      "INFO:tensorflow:loss = 141475300.0, step = 9601 (0.280 sec)\n",
      "INFO:tensorflow:global_step/sec: 368.323\n",
      "INFO:tensorflow:loss = 786568000.0, step = 9701 (0.269 sec)\n",
      "INFO:tensorflow:global_step/sec: 355.317\n",
      "INFO:tensorflow:loss = 1185100300.0, step = 9801 (0.281 sec)\n",
      "INFO:tensorflow:global_step/sec: 334.14\n",
      "INFO:tensorflow:loss = 744197000.0, step = 9901 (0.305 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 10000...\n",
      "INFO:tensorflow:Saving checkpoints for 10000 into /tmp/tmpbahai1ao/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 10000...\n",
      "INFO:tensorflow:Loss for final step: 93738590.0.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T02:57:59\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpbahai1ao/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.34454s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-02:57:59\n",
      "INFO:tensorflow:Saving dict for global step 10000: average_loss = 33032070.0, global_step = 10000, label/mean = 12949.43, loss = 520890340.0, prediction/mean = 12602.933\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 10000: /tmp/tmpbahai1ao/model.ckpt-10000\n",
      "scores {'average_loss': 33032070.0, 'label/mean': 12949.43, 'loss': 520890340.0, 'prediction/mean': 12602.933, 'global_step': 10000}\n"
     ]
    }
   ],
   "source": [
    "#@title Possible solution\n",
    "# We have the full list of values that each feature takes on, and the list is\n",
    "# relatively small so we use categorical_column_with_vocabulary_list.\n",
    "\n",
    "batch_size = 16\n",
    "\n",
    "x_df = car_data[categorical_feature_names]\n",
    "y_series = car_data['price']\n",
    "\n",
    "train_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    num_epochs=6000,\n",
    "    shuffle=True)\n",
    "\n",
    "eval_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "model_feature_columns = [\n",
    "    tf.feature_column.indicator_column(\n",
    "        tf.feature_column.categorical_column_with_vocabulary_list(\n",
    "            feature_name, vocabulary_list=car_data[feature_name].unique()))\n",
    "    for feature_name in categorical_feature_names\n",
    "]\n",
    "print('model_feature_columns', model_feature_columns)\n",
    "\n",
    "est = tf.estimator.DNNRegressor(\n",
    "    feature_columns=model_feature_columns,\n",
    "    hidden_units=[128],\n",
    "    optimizer=tf.train.AdagradOptimizer(learning_rate=0.03),\n",
    "  )\n",
    "\n",
    "# TRAIN\n",
    "num_print_statements = 5\n",
    "num_training_steps = 10000\n",
    "for _ in range(num_print_statements):\n",
    "  est.train(train_input_fn, steps=num_training_steps // num_print_statements)\n",
    "  scores = est.evaluate(eval_input_fn)\n",
    "  \n",
    "  # The `scores` dictionary has several metrics automatically generated by the\n",
    "  # canned Estimator.\n",
    "  # `average_loss` is the average loss for an individual example.\n",
    "  # `loss` is the summed loss for the batch.\n",
    "  # In addition to these scalar losses, you may find the visualization functions\n",
    "  # in the next cell helpful for debugging model quality.\n",
    "  print('scores', scores)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gyBH5Wai_HTD"
   },
   "source": [
    "## Task 4: Using all the features, make the best model that you can make\n",
    "\n",
    "With all the features combined, your model should perform better than your earlier models using numerical and categorical models alone. Tune your model until that is the case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JNfCzC-q8edv"
   },
   "outputs": [],
   "source": [
    "## Your code goes here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CmaGHWFVGKMr",
    "outputId": "3f2be83c-4ada-4c2c-9746-049e05124845"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model_feature_columns [IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='make', vocabulary_list=('volkswagen', 'toyota', 'peugot', 'mazda', 'plymouth', 'honda', 'volvo', 'isuzu', 'jaguar', 'chevrolet', 'subaru', 'mitsubishi', 'nissan', 'dodge', 'bmw', 'audi', 'mercedes-benz', 'porsche', 'alfa-romero', 'saab', 'renault', 'mercury'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='fuel-type', vocabulary_list=('gas', 'diesel'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='aspiration', vocabulary_list=('std', 'turbo'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='num-doors', vocabulary_list=('two', 'four', '?'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='body-style', vocabulary_list=('sedan', 'wagon', 'hatchback', 'hardtop', 'convertible'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='drive-wheels', vocabulary_list=('fwd', '4wd', 'rwd'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='engine-location', vocabulary_list=('front', 'rear'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='engine-type', vocabulary_list=('ohc', 'l', 'dohc', 'ohcv', 'ohcf', 'rotor', 'dohcv'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='num-cylinders', vocabulary_list=('four', 'six', 'twelve', 'two', 'five', 'eight', 'three'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), IndicatorColumn(categorical_column=VocabularyListCategoricalColumn(key='fuel-system', vocabulary_list=('mpfi', '2bbl', 'idi', '1bbl', 'spdi', 'mfi', '4bbl', 'spfi'), dtype=tf.string, default_value=-1, num_oov_buckets=0)), NumericColumn(key='symboling', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='wheel-base', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='length', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='width', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='height', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='weight', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='engine-size', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='bore', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='stroke', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='compression-ratio', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='horsepower', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='peak-rpm', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='city-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='highway-mpg', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None), NumericColumn(key='price', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp5l9nssip\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmp5l9nssip', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_checkpoint_save_graph_def': True, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 0...\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 0...\n",
      "INFO:tensorflow:loss = 2601355300.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 191.845\n",
      "INFO:tensorflow:loss = 914077.1, step = 101 (0.526 sec)\n",
      "INFO:tensorflow:global_step/sec: 225.941\n",
      "INFO:tensorflow:loss = 34924.75, step = 201 (0.451 sec)\n",
      "INFO:tensorflow:global_step/sec: 145.039\n",
      "INFO:tensorflow:loss = 27589.293, step = 301 (0.676 sec)\n",
      "INFO:tensorflow:global_step/sec: 249.39\n",
      "INFO:tensorflow:loss = 7163.981, step = 401 (0.405 sec)\n",
      "INFO:tensorflow:global_step/sec: 233.517\n",
      "INFO:tensorflow:loss = 5802.67, step = 501 (0.430 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.845\n",
      "INFO:tensorflow:loss = 1890.804, step = 601 (0.418 sec)\n",
      "INFO:tensorflow:global_step/sec: 238.318\n",
      "INFO:tensorflow:loss = 4649.7417, step = 701 (0.420 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.319\n",
      "INFO:tensorflow:loss = 3705.3962, step = 801 (0.424 sec)\n",
      "INFO:tensorflow:global_step/sec: 232.896\n",
      "INFO:tensorflow:loss = 11288.9795, step = 901 (0.423 sec)\n",
      "INFO:tensorflow:global_step/sec: 247.592\n",
      "INFO:tensorflow:loss = 7407.2036, step = 1001 (0.406 sec)\n",
      "INFO:tensorflow:global_step/sec: 230.437\n",
      "INFO:tensorflow:loss = 1385.2281, step = 1101 (0.434 sec)\n",
      "INFO:tensorflow:global_step/sec: 245.499\n",
      "INFO:tensorflow:loss = 3134.8523, step = 1201 (0.406 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.723\n",
      "INFO:tensorflow:loss = 1972.4515, step = 1301 (0.417 sec)\n",
      "INFO:tensorflow:global_step/sec: 244.866\n",
      "INFO:tensorflow:loss = 1721.7405, step = 1401 (0.408 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.193\n",
      "INFO:tensorflow:loss = 1219.3535, step = 1501 (0.426 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.014\n",
      "INFO:tensorflow:loss = 1454.1049, step = 1601 (0.422 sec)\n",
      "INFO:tensorflow:global_step/sec: 244.407\n",
      "INFO:tensorflow:loss = 967.32764, step = 1701 (0.408 sec)\n",
      "INFO:tensorflow:global_step/sec: 221.534\n",
      "INFO:tensorflow:loss = 7591.705, step = 1801 (0.449 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.995\n",
      "INFO:tensorflow:loss = 804.2306, step = 1901 (0.430 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:Loss for final step: 466.4681.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T03:25:41\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.41995s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-03:25:42\n",
      "INFO:tensorflow:Saving dict for global step 2000: average_loss = 71.450066, global_step = 2000, label/mean = 12949.43, loss = 1126.7125, prediction/mean = 12948.933\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 2000: /tmp/tmp5l9nssip/model.ckpt-2000\n",
      "scores {'average_loss': 71.450066, 'label/mean': 12949.43, 'loss': 1126.7125, 'prediction/mean': 12948.933, 'global_step': 2000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-2000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 2000...\n",
      "INFO:tensorflow:Saving checkpoints for 2000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 2000...\n",
      "INFO:tensorflow:loss = 1151.457, step = 2001\n",
      "INFO:tensorflow:global_step/sec: 143.362\n",
      "INFO:tensorflow:loss = 2677.213, step = 2101 (0.708 sec)\n",
      "INFO:tensorflow:global_step/sec: 253.079\n",
      "INFO:tensorflow:loss = 1072.9506, step = 2201 (0.384 sec)\n",
      "INFO:tensorflow:global_step/sec: 233.847\n",
      "INFO:tensorflow:loss = 900.60535, step = 2301 (0.434 sec)\n",
      "INFO:tensorflow:global_step/sec: 241.123\n",
      "INFO:tensorflow:loss = 1067.7244, step = 2401 (0.414 sec)\n",
      "INFO:tensorflow:global_step/sec: 222.967\n",
      "INFO:tensorflow:loss = 1468.443, step = 2501 (0.445 sec)\n",
      "INFO:tensorflow:global_step/sec: 250.679\n",
      "INFO:tensorflow:loss = 792.4424, step = 2601 (0.398 sec)\n",
      "INFO:tensorflow:global_step/sec: 222.005\n",
      "INFO:tensorflow:loss = 6761.195, step = 2701 (0.454 sec)\n",
      "INFO:tensorflow:global_step/sec: 219.563\n",
      "INFO:tensorflow:loss = 2447.0283, step = 2801 (0.449 sec)\n",
      "INFO:tensorflow:global_step/sec: 226.782\n",
      "INFO:tensorflow:loss = 2175.1191, step = 2901 (0.441 sec)\n",
      "INFO:tensorflow:global_step/sec: 248.61\n",
      "INFO:tensorflow:loss = 1683.3575, step = 3001 (0.403 sec)\n",
      "INFO:tensorflow:global_step/sec: 236.506\n",
      "INFO:tensorflow:loss = 668.8718, step = 3101 (0.423 sec)\n",
      "INFO:tensorflow:global_step/sec: 227.484\n",
      "INFO:tensorflow:loss = 1536.2468, step = 3201 (0.439 sec)\n",
      "INFO:tensorflow:global_step/sec: 245.688\n",
      "INFO:tensorflow:loss = 2679.4822, step = 3301 (0.407 sec)\n",
      "INFO:tensorflow:global_step/sec: 241.014\n",
      "INFO:tensorflow:loss = 1082.8512, step = 3401 (0.420 sec)\n",
      "INFO:tensorflow:global_step/sec: 249.131\n",
      "INFO:tensorflow:loss = 589.44824, step = 3501 (0.399 sec)\n",
      "INFO:tensorflow:global_step/sec: 227.546\n",
      "INFO:tensorflow:loss = 1978.0226, step = 3601 (0.438 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.227\n",
      "INFO:tensorflow:loss = 984.4135, step = 3701 (0.425 sec)\n",
      "INFO:tensorflow:global_step/sec: 243.788\n",
      "INFO:tensorflow:loss = 561.6465, step = 3801 (0.403 sec)\n",
      "INFO:tensorflow:global_step/sec: 237.984\n",
      "INFO:tensorflow:loss = 783.64655, step = 3901 (0.422 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:Loss for final step: 359.40723.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T03:25:53\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.38273s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-03:25:53\n",
      "INFO:tensorflow:Saving dict for global step 4000: average_loss = 36.21278, global_step = 4000, label/mean = 12949.43, loss = 571.0477, prediction/mean = 12949.662\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4000: /tmp/tmp5l9nssip/model.ckpt-4000\n",
      "scores {'average_loss': 36.21278, 'label/mean': 12949.43, 'loss': 571.0477, 'prediction/mean': 12949.662, 'global_step': 4000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-4000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 4000...\n",
      "INFO:tensorflow:Saving checkpoints for 4000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 4000...\n",
      "INFO:tensorflow:loss = 310.3177, step = 4001\n",
      "INFO:tensorflow:global_step/sec: 198.728\n",
      "INFO:tensorflow:loss = 213.52838, step = 4101 (0.511 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.52\n",
      "INFO:tensorflow:loss = 594.3825, step = 4201 (0.419 sec)\n",
      "INFO:tensorflow:global_step/sec: 238.188\n",
      "INFO:tensorflow:loss = 646.70856, step = 4301 (0.420 sec)\n",
      "INFO:tensorflow:global_step/sec: 253.942\n",
      "INFO:tensorflow:loss = 584.70636, step = 4401 (0.400 sec)\n",
      "INFO:tensorflow:global_step/sec: 144.736\n",
      "INFO:tensorflow:loss = 551.474, step = 4501 (0.687 sec)\n",
      "INFO:tensorflow:global_step/sec: 251.654\n",
      "INFO:tensorflow:loss = 302.20496, step = 4601 (0.394 sec)\n",
      "INFO:tensorflow:global_step/sec: 240.49\n",
      "INFO:tensorflow:loss = 525.9166, step = 4701 (0.419 sec)\n",
      "INFO:tensorflow:global_step/sec: 238.594\n",
      "INFO:tensorflow:loss = 241.82535, step = 4801 (0.422 sec)\n",
      "INFO:tensorflow:global_step/sec: 247.08\n",
      "INFO:tensorflow:loss = 737.72205, step = 4901 (0.399 sec)\n",
      "INFO:tensorflow:global_step/sec: 232.955\n",
      "INFO:tensorflow:loss = 1091.084, step = 5001 (0.430 sec)\n",
      "INFO:tensorflow:global_step/sec: 255.737\n",
      "INFO:tensorflow:loss = 394.18878, step = 5101 (0.395 sec)\n",
      "INFO:tensorflow:global_step/sec: 229.824\n",
      "INFO:tensorflow:loss = 430.248, step = 5201 (0.433 sec)\n",
      "INFO:tensorflow:global_step/sec: 244.846\n",
      "INFO:tensorflow:loss = 243.17151, step = 5301 (0.407 sec)\n",
      "INFO:tensorflow:global_step/sec: 240.976\n",
      "INFO:tensorflow:loss = 8322.673, step = 5401 (0.415 sec)\n",
      "INFO:tensorflow:global_step/sec: 234.679\n",
      "INFO:tensorflow:loss = 258.9464, step = 5501 (0.432 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.291\n",
      "INFO:tensorflow:loss = 395.35626, step = 5601 (0.411 sec)\n",
      "INFO:tensorflow:global_step/sec: 230.964\n",
      "INFO:tensorflow:loss = 369.90704, step = 5701 (0.441 sec)\n",
      "INFO:tensorflow:global_step/sec: 234.44\n",
      "INFO:tensorflow:loss = 1131.8125, step = 5801 (0.424 sec)\n",
      "INFO:tensorflow:global_step/sec: 228.057\n",
      "INFO:tensorflow:loss = 1167.6992, step = 5901 (0.435 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:Loss for final step: 3354.164.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T03:26:04\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.40042s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-03:26:04\n",
      "INFO:tensorflow:Saving dict for global step 6000: average_loss = 249.00865, global_step = 6000, label/mean = 12949.43, loss = 3926.6748, prediction/mean = 12935.736\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 6000: /tmp/tmp5l9nssip/model.ckpt-6000\n",
      "scores {'average_loss': 249.00865, 'label/mean': 12949.43, 'loss': 3926.6748, 'prediction/mean': 12935.736, 'global_step': 6000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-6000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 6000...\n",
      "INFO:tensorflow:Saving checkpoints for 6000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 6000...\n",
      "INFO:tensorflow:loss = 4953.589, step = 6001\n",
      "INFO:tensorflow:global_step/sec: 206.928\n",
      "INFO:tensorflow:loss = 422.86057, step = 6101 (0.491 sec)\n",
      "INFO:tensorflow:global_step/sec: 252.778\n",
      "INFO:tensorflow:loss = 457.68884, step = 6201 (0.392 sec)\n",
      "INFO:tensorflow:global_step/sec: 233.891\n",
      "INFO:tensorflow:loss = 152.13177, step = 6301 (0.427 sec)\n",
      "INFO:tensorflow:global_step/sec: 226.985\n",
      "INFO:tensorflow:loss = 558.1613, step = 6401 (0.443 sec)\n",
      "INFO:tensorflow:global_step/sec: 243.175\n",
      "INFO:tensorflow:loss = 913.5434, step = 6501 (0.413 sec)\n",
      "INFO:tensorflow:global_step/sec: 222.872\n",
      "INFO:tensorflow:loss = 1690.3264, step = 6601 (0.449 sec)\n",
      "INFO:tensorflow:global_step/sec: 228.342\n",
      "INFO:tensorflow:loss = 275.4327, step = 6701 (0.434 sec)\n",
      "INFO:tensorflow:global_step/sec: 233.453\n",
      "INFO:tensorflow:loss = 2411.2476, step = 6801 (0.428 sec)\n",
      "INFO:tensorflow:global_step/sec: 237.132\n",
      "INFO:tensorflow:loss = 188.3157, step = 6901 (0.423 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.332\n",
      "INFO:tensorflow:loss = 821.1804, step = 7001 (0.426 sec)\n",
      "INFO:tensorflow:global_step/sec: 228.254\n",
      "INFO:tensorflow:loss = 631.74646, step = 7101 (0.437 sec)\n",
      "INFO:tensorflow:global_step/sec: 240.073\n",
      "INFO:tensorflow:loss = 266.63904, step = 7201 (0.417 sec)\n",
      "INFO:tensorflow:global_step/sec: 238.319\n",
      "INFO:tensorflow:loss = 442.7303, step = 7301 (0.425 sec)\n",
      "INFO:tensorflow:global_step/sec: 155.816\n",
      "INFO:tensorflow:loss = 1700.8818, step = 7401 (0.635 sec)\n",
      "INFO:tensorflow:global_step/sec: 248.512\n",
      "INFO:tensorflow:loss = 4079.4214, step = 7501 (0.403 sec)\n",
      "INFO:tensorflow:global_step/sec: 236.318\n",
      "INFO:tensorflow:loss = 384.06152, step = 7601 (0.430 sec)\n",
      "INFO:tensorflow:global_step/sec: 232.302\n",
      "INFO:tensorflow:loss = 1912.094, step = 7701 (0.426 sec)\n",
      "INFO:tensorflow:global_step/sec: 250.681\n",
      "INFO:tensorflow:loss = 755.2055, step = 7801 (0.413 sec)\n",
      "INFO:tensorflow:global_step/sec: 226.267\n",
      "INFO:tensorflow:loss = 179.4928, step = 7901 (0.428 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:Loss for final step: 1330.8315.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T03:26:15\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.38808s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-03:26:15\n",
      "INFO:tensorflow:Saving dict for global step 8000: average_loss = 32.91933, global_step = 8000, label/mean = 12949.43, loss = 519.11255, prediction/mean = 12946.339\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 8000: /tmp/tmp5l9nssip/model.ckpt-8000\n",
      "scores {'average_loss': 32.91933, 'label/mean': 12949.43, 'loss': 519.11255, 'prediction/mean': 12946.339, 'global_step': 8000}\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-8000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 8000...\n",
      "INFO:tensorflow:Saving checkpoints for 8000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 8000...\n",
      "INFO:tensorflow:loss = 304.03058, step = 8001\n",
      "INFO:tensorflow:global_step/sec: 189.175\n",
      "INFO:tensorflow:loss = 482.9301, step = 8101 (0.531 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.437\n",
      "INFO:tensorflow:loss = 441.47076, step = 8201 (0.433 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.64\n",
      "INFO:tensorflow:loss = 213.85605, step = 8301 (0.415 sec)\n",
      "INFO:tensorflow:global_step/sec: 249.323\n",
      "INFO:tensorflow:loss = 115.239136, step = 8401 (0.407 sec)\n",
      "INFO:tensorflow:global_step/sec: 230.801\n",
      "INFO:tensorflow:loss = 156.0579, step = 8501 (0.429 sec)\n",
      "INFO:tensorflow:global_step/sec: 234.888\n",
      "INFO:tensorflow:loss = 414.35602, step = 8601 (0.424 sec)\n",
      "INFO:tensorflow:global_step/sec: 245.758\n",
      "INFO:tensorflow:loss = 520.99646, step = 8701 (0.407 sec)\n",
      "INFO:tensorflow:global_step/sec: 227.558\n",
      "INFO:tensorflow:loss = 484.4117, step = 8801 (0.442 sec)\n",
      "INFO:tensorflow:global_step/sec: 247.73\n",
      "INFO:tensorflow:loss = 1694.3695, step = 8901 (0.402 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.167\n",
      "INFO:tensorflow:loss = 340.6026, step = 9001 (0.418 sec)\n",
      "INFO:tensorflow:global_step/sec: 236.286\n",
      "INFO:tensorflow:loss = 1629.3595, step = 9101 (0.425 sec)\n",
      "INFO:tensorflow:global_step/sec: 232.117\n",
      "INFO:tensorflow:loss = 247.09958, step = 9201 (0.430 sec)\n",
      "INFO:tensorflow:global_step/sec: 235.204\n",
      "INFO:tensorflow:loss = 372.7334, step = 9301 (0.429 sec)\n",
      "INFO:tensorflow:global_step/sec: 243.788\n",
      "INFO:tensorflow:loss = 478.65643, step = 9401 (0.406 sec)\n",
      "INFO:tensorflow:global_step/sec: 231.992\n",
      "INFO:tensorflow:loss = 145.00621, step = 9501 (0.434 sec)\n",
      "INFO:tensorflow:global_step/sec: 248.521\n",
      "INFO:tensorflow:loss = 143.09097, step = 9601 (0.402 sec)\n",
      "INFO:tensorflow:global_step/sec: 231.993\n",
      "INFO:tensorflow:loss = 240.53424, step = 9701 (0.433 sec)\n",
      "INFO:tensorflow:global_step/sec: 239.222\n",
      "INFO:tensorflow:loss = 3450.0076, step = 9801 (0.419 sec)\n",
      "INFO:tensorflow:global_step/sec: 244.544\n",
      "INFO:tensorflow:loss = 623.50165, step = 9901 (0.405 sec)\n",
      "INFO:tensorflow:Calling checkpoint listeners before saving checkpoint 10000...\n",
      "INFO:tensorflow:Saving checkpoints for 10000 into /tmp/tmp5l9nssip/model.ckpt.\n",
      "INFO:tensorflow:Calling checkpoint listeners after saving checkpoint 10000...\n",
      "INFO:tensorflow:Loss for final step: 301.55383.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2021-07-31T03:26:26\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmp5l9nssip/model.ckpt-10000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Inference Time : 0.39333s\n",
      "INFO:tensorflow:Finished evaluation at 2021-07-31-03:26:26\n",
      "INFO:tensorflow:Saving dict for global step 10000: average_loss = 26.025547, global_step = 10000, label/mean = 12949.43, loss = 410.40286, prediction/mean = 12951.933\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 10000: /tmp/tmp5l9nssip/model.ckpt-10000\n",
      "scores {'average_loss': 26.025547, 'label/mean': 12949.43, 'loss': 410.40286, 'prediction/mean': 12951.933, 'global_step': 10000}\n"
     ]
    }
   ],
   "source": [
    "#@title Possible solution\n",
    "# This is a first pass at a model that uses all the features.\n",
    "# Do you have any improvements?\n",
    "\n",
    "batch_size = 16 \n",
    "\n",
    "x_df = car_data[numeric_feature_names + categorical_feature_names]\n",
    "y_series = car_data['price']\n",
    "\n",
    "train_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    num_epochs=60000,\n",
    "    shuffle=True)\n",
    "\n",
    "eval_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    y=y_series,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "predict_input_fn = tf.estimator.inputs.pandas_input_fn(\n",
    "    x=x_df,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=False)\n",
    "\n",
    "epsilon = 0.000001\n",
    "model_feature_columns = [\n",
    "    tf.feature_column.indicator_column(\n",
    "        tf.feature_column.categorical_column_with_vocabulary_list(\n",
    "            feature_name, vocabulary_list=car_data[feature_name].unique()))\n",
    "    for feature_name in categorical_feature_names\n",
    "] + [\n",
    "    tf.feature_column.numeric_column(feature_name)\n",
    "    for feature_name in numeric_feature_names\n",
    "]\n",
    "\n",
    "\n",
    "print('model_feature_columns', model_feature_columns)\n",
    "\n",
    "est = tf.estimator.DNNRegressor(\n",
    "    feature_columns=model_feature_columns,\n",
    "    hidden_units=[128],\n",
    "    optimizer=tf.train.AdagradOptimizer(learning_rate=0.03),\n",
    "  )\n",
    "\n",
    "# TRAIN\n",
    "num_print_statements = 5\n",
    "num_training_steps = 10000\n",
    "for _ in range(num_print_statements):\n",
    "  est.train(train_input_fn, steps=num_training_steps // num_print_statements)\n",
    "  scores = est.evaluate(eval_input_fn)\n",
    "  \n",
    "  # The `scores` dictionary has several metrics automatically generated by the \n",
    "  # canned Estimator.\n",
    "  # `average_loss` is the average loss for an individual example.\n",
    "  # `loss` is the summed loss for the batch.\n",
    "  # In addition to these scalar losses, you may find the visualization functions\n",
    "  # in the next cell helpful for debugging model quality.\n",
    "  print('scores', scores)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Copy of intro_to_modeling.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
